/* PEDESTRIAN AND PEDALCYLIST FATALITIES - CRASH, NONOCCUPANT, AND STRIKING VEHICLE/DRIVER CHARACTERISTICS */
/* BRIANA THRIFT, FHWA FELLOW */
/* PROGRAM EDITED BY TONJA LINDSEY, NHTSA/NCSA */
/* FARS 2001-2017 */

/* ESTABLISH FARS LIBRARIES (DATA AND FORMATS) IF NOT ALREADY DONE */
%INCLUDE 'C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\SAS Programs\Old SAS Programs\AUTOEXEC.SAS';  /* THIS CODE POINTS TO FARS FILES LOCATED ON THE NHTSA/NCSA LOCAL NETWORK */

/* LOCATION OF CITY AND COUNTY NAMES DATASET */
LIBNAME CITYCNTY 'C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\SAS Programs\Old SAS Programs';  /* LOCATION OF CITY NAME (CITY) AND COUNTY NAME (COUNTY) SAS DATASETS ON TONJA'S LOCAL NETWORK */
*LIBNAME CITYCNTY 'H:\FARS DATA\CITYCNTY';  /* LOCATION OF CITY NAME (CITY) AND COUNTY NAME (COUNTY) SAS DATASETS ON BRIANA'S LOCAL NETWORK */

LIBNAME OUT 'C:\Users\Briana.Thrift.ctr\Desktop';

/* CUSTOMIZED FORMATS */

PROC FORMAT;
  VALUE PERFMT
  1 = 'Driver of a Motor Vehicle in Transport'
  2 = 'Passenger of a Motor Vehicle in Transport'
  3 = 'Occupant of a Motor Vehicle Not in Transport'
  5 = 'Pedestrian'
  6,7 = 'Pedalcyclist'
  9 = 'Unknown Occupant Type in a Motor Vehicle in Transport';

  VALUE LANDFMT
  1 = 'Rural'
  2 = 'Urban'
  3 = 'Unknown';

  VALUE SPDFMT
  0 = 'Not Speeding'
  1 = 'Speeding';

  VALUE ALCTFMT
  1 = 'Tested With Known Results'
  2 = 'Tested With Unknown Results'
  3 = 'Not Tested'
  4 = 'Unknown If Tested';

  VALUE BODYFMT
  1 = 'Passenger Car'
  2 = 'Light Truck - Pickup'
  3 = 'Light Truck - Utility'
  4 = 'Light Truck - Van'
  5 = 'Light Truck - Other'
  6 = 'Large Truck'
  7 = 'Motorcycle'
  8 = 'Bus'
  9 = 'Other/Unknown Vehicle'
  10 = 'Missing - No Striking Vehicle Match';

  VALUE RESTFMT
  1 = 'Restrained'
  2 = 'Unrestrained'
  3 = 'Unknown';

  VALUE RACEFMT
  1 = 'White'
  2 = 'Black'
  3 = 'American Indian (inc. Alaska Native)'
  4 = 'Asian'
  5 = 'Native Hawaiian or Other Pacific Islander'
  6 = 'Multiple Races'
  7 = 'All Other Races'
  8 = 'Unknown';

  VALUE HISPFMT
  1 = 'Non-Hispanic'
  2 = 'Hispanic'
  3 = 'Unknown';

  VALUE HRACEFMT  /* OMB CLASSIFICATIONS */
  1 = 'Hispanic'
  2 = 'White, Non-Hispanic'
  3 = 'Black, Non-Hispanic'
  4 = 'American Indian, Non-Hispanic/ Unknown'
  5 = 'Asian, Non-Hispanic/ Unknown'
  6 = 'Native Hawaiian or Other Pacific Islander, Non-Hispanic/ Unknown'
  7 = 'Multiple Races, Non-Hispanic/ Unknown'
  8 = 'All Others'
  9 = 'Unknown';
RUN;

/* CLEAR THE APPENDED DATASETS EVERTIME YOU RUN THE CODE TO AVOID APPENDING PREVIOUSLY CREATED DATASETS */
PROC DATASETS NOLIST;
  DELETE PEDS_2001_2008
         PEDS_2009
         PEDS_2010_2014
         PEDS_2015_2017;
QUIT;

/**********************************************************/
/* RUN A MACRO LOOP TO APPEND DATA FROM 2001 TO 2017      */
/* GROUP THE DATA YEARS BASED ON CONSISTENCY IN VARIABLES */
/**********************************************************/

%MACRO REPEAT;
%DO Y=2017 %TO 2001 %BY -1;  /* RUN LOOP FROM LATEST TO EARLIEST YEAR DESIRED */

/* CREATE MACROS TO ACCOUNT FOR VARIABLE NAME CHANGES THROUGH THE YEARS */

/* NONOCCUPANT STRIKING VEHICLE NUMBER - VARIABLE NAME CHANGED IN 2010 */
%IF &Y<2011 %THEN %DO;
  %LET STRVEH_VAR=N_MOT_NO;
  %LET REN_STRVEH=%STR(RENAME=(N_MOT_NO=STR_VEH));
%END;
%ELSE %IF &Y>2010 %THEN %DO;
  %LET STRVEH_VAR=STR_VEH;
  %LET REN_STRVEH= ;
%END;

/* LAND USE AND ROADWAY FUNCTION VARIABLES */
%IF &Y<1981 %THEN %LET ROAD=CL_TWAY;
%ELSE %IF &Y>1980 AND &Y<2015 %THEN %LET ROAD=ROAD_FNC;
%ELSE %IF &Y>2014 %THEN %LET ROAD=FUNC_SYS;

%IF &Y<1987 %THEN %LET LANDU=LAND_USE;
%ELSE %IF &Y>1986 AND &Y<2015 %THEN %LET LANDU=ROAD_FNC;
%ELSE %IF &Y>2014 %THEN %LET LANDU=RUR_URB;

/* THE DRIVER SPEEDING RELATED ELEMENT (SPEEDREL) WAS INTRODUCED IN 2009
   PRIOR TO 2009, SPEEDING DRIVERS WAS OBTAINED FROM DRIVER RELATED FACTORS (DR_CF1-DR_CF4), WHICH ARE LOCATED ON THE VEHICLE FILE */

%IF &Y < 1997 %THEN %DO;
   %LET DRCF=DR_CF1-DR_CF3;
   %LET SPDFCTR=(DR_CF1=44 OR DR_CF2=44 OR DR_CF3=44);
%END;
%ELSE %IF &Y=1997 %THEN %DO;
   %LET DRCF=DR_CF1-DR_CF4;
   %LET SPDFCTR=(DR_CF1=44 OR DR_CF2=44 OR DR_CF3=44 OR DR_CF4=44);
%END;
%ELSE %IF &Y > 1997 AND &Y < 2008 %THEN %DO;
  %LET DRCF=DR_CF1-DR_CF4;
  %LET SPDFCTR=(DR_CF1 IN (44,46) OR DR_CF2 IN (44,46) OR DR_CF3 IN (44,46) OR
                DR_CF4 IN (44,46));
%END;
%ELSE %IF &Y=2008 %THEN %DO;
  %LET DRCF=DR_CF1-DR_CF4;
  %LET SPDFCTR=(DR_CF1 IN (43,44,46) OR DR_CF2 IN (43,44,46) OR DR_CF3 IN (43,44,46) OR
                DR_CF4 IN (43,44,46));
%END;
%ELSE %IF &Y > 2008 AND &Y < 2013 %THEN %DO;
  %LET DRCF=SPEEDREL;
  %LET SPDFCTR=(SPEEDREL=1);
%END;
%ELSE %IF &Y > 2012 %THEN %DO;
  %LET DRCF=SPEEDREL;
  %LET SPDFCTR=(SPEEDREL IN (2,3,4,5));
%END;

/**************************/
/* DATA YEARS 2001 - 2008 */
/**************************/

%IF &Y>2000 AND &Y<2009 %THEN %DO;

/* CREATE DATASETS FOR 1) PEDESTRIAN AND PEDALCYCLIST FATALITIES AND 2) DRIVERS INVOLVED AND ATTACH
   THEIR IMPUTED ALCOHOL DATA
   RENAME P1-P10 TO D1-D10 IN THE DRIVER (DRV) FILE TO DIFFERENTIATE FROM THE IMPUTED ALCOHOL
   VARIABLES (P1-P10) FOR THE PEDESTRIANS AND PEDALCYCLISTS IN THE PED FILE */
DATA PED (KEEP=ST_CASE PER_TYP AGE SEX DRINKING ALC_RES HOSPITAL DOA DEATH_MO DEATH_YR LAG_HRS LAG_MINS
               RACE HISPANIC LOCATION INJ_SEV P1-P10 &STRVEH_VAR &REN_STRVEH)
     DRV (RENAME=(DRINKING=DRV_DRINKING ALC_RES=DRV_ALC_RES AGE=DRV_AGE SEX=DRV_SEX
                  P1=D1 P2=D2 P3=D3 P4=D4 P5=D5 P6=D6 P7=D7 P8=D8 P9=D9 P10=D10));
  MERGE FARS&Y..PERSON 
        FARS&Y..MIPER;  /* IMPUTED ALCOHOL DATASET */
  BY ST_CASE VEH_NO PER_NO;
  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) OR PER_TYP=1;

  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) THEN OUTPUT PED;  /* OUTPUT TO PED FILE */
  ELSE IF PER_TYP=0 THEN OUTPUT DRV;  /* OUTPUT TO DRIVER FILE */
RUN;

/* GET VEHICLES, ALONG WITH ANY ASSOCIATED DRIVER DATA */
DATA VEH;
  MERGE FARS&Y..VEHICLE (KEEP=ST_CASE VEH_NO MAKE MODEL MOD_YEAR BODY_TYP DR_CF1-DR_CF4 TRAV_SP
	                          HIT_RUN REG_STAT OWNER GVWR M_HARM IMPACT1 DEATHS DR_ZIP PREV_ACC
	                          PREV_SUS PREV_DWI PREV_SPD PREV_OTH FIRST_YR LAST_YR VIOLCHG1-VIOLCHG3 IN=A)
        DRV;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* ATTACH ACCIDENT DATA TO PED DATA */
DATA ACC_PED;
  MERGE FARS&Y..ACCIDENT (KEEP=ST_CASE STATE CITY COUNTY VE_FORMS HARM_EV ROAD_FNC
                               LGT_COND WEATHER LATITUDE LONGITUD SP_LIMIT)
        PED (IN=A);
  BY ST_CASE;
  IF A;
RUN;

/* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO */
DATA PED1;
  SET ACC_PED;
  /* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO 
     SO THAT IT CAN BE MERGED WITH THEIR STRIKING VEHICLE */
  RENAME STR_VEH=VEH_NO;
RUN;
  
PROC SORT DATA=PED1; BY ST_CASE VEH_NO;  RUN;

/* ATTACH VEHICLE/DRIVER DATA TO PED FATALITIES */
DATA PED_VEH;
  MERGE VEH
        PED1 (IN=A);
  BY ST_CASE VEH_NO;
  IF A;
  YEAR=&Y;  /* DATA YEAR */
RUN;

PROC APPEND BASE=PEDS_2001_2008 DATA=PED_VEH FORCE;  RUN;

%END;  /* END 2001 TO 2008 */

/*********************************************************************/

/******************/
/* DATA YEAR 2009 */
/******************/

%ELSE %IF &Y=2009 %THEN %DO;

/* CREATE DATASETS FOR 1) PEDESTRIAN AND PEDALCYCLIST FATALITIES AND 2) DRIVERS INVOLVED AND ATTACH
   THEIR IMPUTED ALCOHOL DATA
   RENAME P1-P10 TO D1-D10 IN THE DRIVER (DRV) FILE TO DIFFERENTIATE FROM THE IMPUTED ALCOHOL
   VARIABLES (P1-P10) FOR THE PEDESTRIANS AND PEDALCYCLISTS IN THE PED FILE */
DATA PED (KEEP=ST_CASE PER_TYP AGE SEX DRINKING ALC_RES HOSPITAL DOA DEATH_MO DEATH_YR LAG_HRS LAG_MINS
               RACE HISPANIC LOCATION INJ_SEV P1-P10 &STRVEH_VAR &REN_STRVEH)
     DRV (RENAME=(DRINKING=DRV_DRINKING ALC_RES=DRV_ALC_RES AGE=DRV_AGE SEX=DRV_SEX
                  P1=D1 P2=D2 P3=D3 P4=D4 P5=D5 P6=D6 P7=D7 P8=D8 P9=D9 P10=D10));
  MERGE FARS&Y..PERSON 
        FARS&Y..MIPER;  /* IMPUTED ALCOHOL DATASET */
  BY ST_CASE VEH_NO PER_NO;
  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) OR PER_TYP=1;

  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) THEN OUTPUT PED;  /* OUTPUT TO PED FILE */
  ELSE IF PER_TYP=0 THEN OUTPUT DRV;  /* OUTPUT TO DRIVER FILE */
RUN;

/* GET VEHICLES, ALONG WITH ANY ASSOCIATED DRIVER DATA */
DATA VEH;
  MERGE FARS&Y..VEHICLE (KEEP=ST_CASE VEH_NO MAKE MODEL MOD_YEAR BODY_TYP SPEEDREL TRAV_SP
	                          HIT_RUN REG_STAT OWNER GVWR M_HARM IMPACT1 DEATHS DR_ZIP PREV_ACC
	                          PREV_SUS PREV_DWI PREV_SPD PREV_OTH FIRST_YR LAST_YR VIOLCHG1-VIOLCHG3 IN=A)
        DRV;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* ATTACH ACCIDENT DATA TO PED DATA */
DATA ACC_PED;
  MERGE FARS&Y..ACCIDENT (KEEP=ST_CASE STATE CITY COUNTY VE_FORMS HARM_EV ROAD_FNC
                               LGT_COND WEATHER LATITUDE LONGITUD SP_LIMIT)
        PED (IN=A);
  BY ST_CASE;
  IF A;
RUN;

/* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO */
DATA PED1;
  SET ACC_PED;
  /* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO 
     SO THAT IT CAN BE MERGED WITH THEIR STRIKING VEHICLE */
  RENAME STR_VEH=VEH_NO;
RUN;
  
PROC SORT DATA=PED1; BY ST_CASE VEH_NO;  RUN;

/* ATTACH VEHICLE/DRIVER DATA TO PED FATALITIES */
DATA PED_VEH;
  MERGE VEH
        PED1 (IN=A);
  BY ST_CASE VEH_NO;
  IF A;
  YEAR=&Y;  /* DATA YEAR */
RUN;

PROC APPEND BASE=PEDS_2009 DATA=PED_VEH FORCE;  RUN;

%END;  /* END 2009 */

/*********************************************************************/

/**************************/
/* DATA YEARS 2010 - 2014 */
/**************************/

%ELSE %IF &Y>2009 AND &Y < 2015 %THEN %DO;

/* CREATE DATASETS FOR 1) PEDESTRIAN AND PEDALCYCLIST FATALITIES AND 2) DRIVERS INVOLVED AND ATTACH
   THEIR IMPUTED ALCOHOL DATA
   RENAME P1-P10 TO D1-D10 IN THE DRIVER (DRV) FILE TO DIFFERENTIATE FROM THE IMPUTED ALCOHOL
   VARIABLES (P1-P10) FOR THE PEDESTRIANS AND PEDALCYCLISTS IN THE PED FILE */
DATA PED (KEEP=ST_CASE PER_TYP AGE SEX DRINKING ALC_RES HOSPITAL DOA DEATH_MO DEATH_YR LAG_HRS LAG_MINS
               RACE HISPANIC LOCATION INJ_SEV P1-P10 &STRVEH_VAR &REN_STRVEH)
     DRV (RENAME=(DRINKING=DRV_DRINKING ALC_RES=DRV_ALC_RES AGE=DRV_AGE SEX=DRV_SEX
                  P1=D1 P2=D2 P3=D3 P4=D4 P5=D5 P6=D6 P7=D7 P8=D8 P9=D9 P10=D10));
  MERGE FARS&Y..PERSON 
        FARS&Y..MIPER;  /* IMPUTED ALCOHOL DATASET */
  BY ST_CASE VEH_NO PER_NO;
  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) OR PER_TYP=1;

  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) THEN OUTPUT PED;  /* OUTPUT TO PED FILE */
  ELSE IF PER_TYP=0 THEN OUTPUT DRV;  /* OUTPUT TO DRIVER FILE */
RUN;

/* GET VEHICLES, ALONG WITH ANY ASSOCIATED DRIVER DATA */
DATA VEH;
  MERGE FARS&Y..VEHICLE (KEEP=ST_CASE VEH_NO MAKE MODEL MOD_YEAR BODY_TYP SPEEDREL TRAV_SP
	                          HIT_RUN REG_STAT OWNER GVWR M_HARM IMPACT1 DEATHS DR_ZIP PREV_ACC
	                          PREV_SUS PREV_DWI PREV_SPD PREV_OTH FIRST_YR LAST_YR ACC_TYPE VSPD_LIM IN=A)
        DRV;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* ATTACH ACCIDENT DATA TO PED DATA */
DATA ACC_PED;
  MERGE FARS&Y..ACCIDENT (KEEP=ST_CASE STATE CITY COUNTY VE_FORMS HARM_EV ROAD_FNC
                               LGT_COND WEATHER LATITUDE LONGITUD)
        PED (IN=A);
  BY ST_CASE;
  IF A;
RUN;

/* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO */
DATA PED1;
  SET ACC_PED;
  /* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO 
     SO THAT IT CAN BE MERGED WITH THEIR STRIKING VEHICLE */
  RENAME STR_VEH=VEH_NO;
RUN;
  
PROC SORT DATA=PED1; BY ST_CASE VEH_NO;  RUN;

/* ATTACH VEHICLE/DRIVER DATA TO PED FATALITIES */
DATA PED_VEH;
  MERGE VEH
        PED1 (IN=A);
  BY ST_CASE VEH_NO;
  IF A;
  YEAR=&Y;  /* DATA YEAR */
RUN;

/* DRIVER VIOLATIONS CHARGED WENT TO PICK ALL THAT APPLIES IN 2010 */
/* GET ALL VIOLATIONS CHARGED FOR STRIKING VEHICLE DRIVERS */
DATA VIOL;
  MERGE PED_VEH (KEEP=ST_CASE VEH_NO IN=A)
        FARS&Y..VIOLATN;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* TRANSPOSE THE VIOL DATASET SO THAT THERE IS A SEPARATE VIOLATION DATA ELEMENT FOR EACH VIOLATION */ 
PROC TRANSPOSE DATA=VIOL OUT=TRANS_VIOL (DROP=_NAME_ _LABEL_) PREFIX=VIOLCHG;
  BY ST_CASE VEH_NO;
  VAR MVIOLATN;
RUN;

/* A SURVEY OF THE DATA FROM 2010 TO 2017 SHOWED THAT THE MAXIMUM
   NUMBER OF VIOLATIONS CODED FOR A VEHICLE/DRIVER WHO STRUCK A PED
   WAS 9. SO CREATE 9 VARIABLES FOR VIOLATIONS - VIOLCHG1-VIOLCHG9 */
DATA VIOL_RETAIN;
  RETAIN ST_CASE VEH_NO VIOLCHG1-VIOLCHG9 .;
  SET TRANS_VIOL;
RUN;

/* FINISHED WITH VIOLATIONS CHARGED */

/* ATTACH VIOLATIONS CHARGED DATA ELEMENTS TO THE PED_VEH DATASET */
DATA PED_VEH1;
  MERGE PED_VEH (IN=A)
        VIOL_RETAIN;
  BY ST_CASE;
  IF A;
RUN;

PROC APPEND BASE=PEDS_2010_2014 DATA=PED_VEH1 FORCE;  RUN;

%END;  /* END 2010 - 2014 */

/*********************************************************************/

/**************************/
/* DATA YEARS 2015 - 2017 */
/**************************/

%ELSE %IF &Y>2014 AND &Y<2018 %THEN %DO;

/* CREATE DATASETS FOR 1) PEDESTRIAN AND PEDALCYCLIST FATALITIES AND 2) DRIVERS INVOLVED AND ATTACH
   THEIR IMPUTED ALCOHOL DATA
   RENAME P1-P10 TO D1-D10 IN THE DRIVER (DRV) FILE TO DIFFERENTIATE FROM THE IMPUTED ALCOHOL
   VARIABLES (P1-P10) FOR THE PEDESTRIANS AND PEDALCYCLISTS IN THE PED FILE */
DATA PED (KEEP=ST_CASE PER_TYP AGE SEX DRINKING ALC_RES HOSPITAL DOA DEATH_MO DEATH_YR LAG_HRS LAG_MINS
               RACE HISPANIC LOCATION INJ_SEV P1-P10 STR_VEH)
     DRV (RENAME=(DRINKING=DRV_DRINKING ALC_RES=DRV_ALC_RES AGE=DRV_AGE SEX=DRV_SEX
                  P1=D1 P2=D2 P3=D3 P4=D4 P5=D5 P6=D6 P7=D7 P8=D8 P9=D9 P10=D10));
  MERGE FARS&Y..PERSON 
        FARS&Y..MIPER;  /* IMPUTED ALCOHOL DATASET */
  BY ST_CASE VEH_NO PER_NO;
  IF (PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4) OR PER_TYP=1;

  /* IN 2015, ALCOHOL TEST RESULTS (ALC_RES) ATTRIBUTES WENT FROM 2-DIGITS TO 3-DIGITS */
  /* MAP THE 2015 AND LATER YEAR ATTRIBUTES TO THE 2014 AND EARLIER YEAR 2-DIGIT SCHEMA */ 
  IF &Y>=2015 THEN DO;

    IF ALC_RES IN (0:9) THEN NEW_RES=0;
    ELSE IF ALC_RES IN (10:19) THEN NEW_RES=1;
    ELSE IF ALC_RES IN (20:29) THEN NEW_RES=2;
    ELSE IF ALC_RES IN (30:39) THEN NEW_RES=3;
    ELSE IF ALC_RES IN (40:49) THEN NEW_RES=4;
    ELSE IF ALC_RES IN (50:59) THEN NEW_RES=5;
    ELSE IF ALC_RES IN (60:69) THEN NEW_RES=6;
    ELSE IF ALC_RES IN (70:79) THEN NEW_RES=7;
    ELSE IF ALC_RES IN (80:89) THEN NEW_RES=8;
    ELSE IF ALC_RES IN (90:99) THEN NEW_RES=9;

    ELSE IF ALC_RES IN (100:109) THEN NEW_RES=10;
    ELSE IF ALC_RES IN (110:119) THEN NEW_RES=11;
    ELSE IF ALC_RES IN (120:129) THEN NEW_RES=12;
    ELSE IF ALC_RES IN (130:139) THEN NEW_RES=13;
    ELSE IF ALC_RES IN (140:149) THEN NEW_RES=14;
    ELSE IF ALC_RES IN (150:159) THEN NEW_RES=15;
    ELSE IF ALC_RES IN (160:169) THEN NEW_RES=16;
    ELSE IF ALC_RES IN (170:179) THEN NEW_RES=17;
    ELSE IF ALC_RES IN (180:189) THEN NEW_RES=18;
    ELSE IF ALC_RES IN (190:199) THEN NEW_RES=19;

    ELSE IF ALC_RES IN (200:209) THEN NEW_RES=20;
    ELSE IF ALC_RES IN (210:219) THEN NEW_RES=21;
    ELSE IF ALC_RES IN (220:229) THEN NEW_RES=22;
    ELSE IF ALC_RES IN (230:239) THEN NEW_RES=23;
    ELSE IF ALC_RES IN (240:249) THEN NEW_RES=24;
    ELSE IF ALC_RES IN (250:259) THEN NEW_RES=25;
    ELSE IF ALC_RES IN (260:269) THEN NEW_RES=26;
    ELSE IF ALC_RES IN (270:279) THEN NEW_RES=27;
    ELSE IF ALC_RES IN (280:289) THEN NEW_RES=28;
    ELSE IF ALC_RES IN (290:299) THEN NEW_RES=29;

    ELSE IF ALC_RES IN (300:309) THEN NEW_RES=30;
    ELSE IF ALC_RES IN (310:319) THEN NEW_RES=31;
    ELSE IF ALC_RES IN (320:329) THEN NEW_RES=32;
    ELSE IF ALC_RES IN (330:339) THEN NEW_RES=33;
    ELSE IF ALC_RES IN (340:349) THEN NEW_RES=34;
    ELSE IF ALC_RES IN (350:359) THEN NEW_RES=35;
    ELSE IF ALC_RES IN (360:369) THEN NEW_RES=36;
    ELSE IF ALC_RES IN (370:379) THEN NEW_RES=37;
    ELSE IF ALC_RES IN (380:389) THEN NEW_RES=38;
    ELSE IF ALC_RES IN (390:399) THEN NEW_RES=39;

    ELSE IF ALC_RES IN (400:409) THEN NEW_RES=40;
    ELSE IF ALC_RES IN (410:419) THEN NEW_RES=41;
    ELSE IF ALC_RES IN (420:429) THEN NEW_RES=42;
    ELSE IF ALC_RES IN (430:439) THEN NEW_RES=43;
    ELSE IF ALC_RES IN (440:449) THEN NEW_RES=44;
    ELSE IF ALC_RES IN (450:459) THEN NEW_RES=45;
    ELSE IF ALC_RES IN (460:469) THEN NEW_RES=46;
    ELSE IF ALC_RES IN (470:479) THEN NEW_RES=47;
    ELSE IF ALC_RES IN (480:489) THEN NEW_RES=48;
    ELSE IF ALC_RES IN (490:499) THEN NEW_RES=49;

    ELSE IF ALC_RES IN (500:509) THEN NEW_RES=50;
    ELSE IF ALC_RES IN (510:519) THEN NEW_RES=51;
    ELSE IF ALC_RES IN (520:529) THEN NEW_RES=52;
    ELSE IF ALC_RES IN (530:559) THEN NEW_RES=53;
    ELSE IF ALC_RES IN (540:549) THEN NEW_RES=54;
    ELSE IF ALC_RES IN (550:559) THEN NEW_RES=55;
    ELSE IF ALC_RES IN (560:569) THEN NEW_RES=56;
    ELSE IF ALC_RES IN (570:579) THEN NEW_RES=57;
    ELSE IF ALC_RES IN (580:589) THEN NEW_RES=58;
    ELSE IF ALC_RES IN (590:599) THEN NEW_RES=59;

    ELSE IF ALC_RES IN (600:609) THEN NEW_RES=60;
    ELSE IF ALC_RES IN (610:619) THEN NEW_RES=61;
    ELSE IF ALC_RES IN (620:629) THEN NEW_RES=62;
    ELSE IF ALC_RES IN (630:639) THEN NEW_RES=63;
    ELSE IF ALC_RES IN (640:649) THEN NEW_RES=64;
    ELSE IF ALC_RES IN (650:659) THEN NEW_RES=65;
    ELSE IF ALC_RES IN (660:669) THEN NEW_RES=66;
    ELSE IF ALC_RES IN (670:679) THEN NEW_RES=67;
    ELSE IF ALC_RES IN (680:689) THEN NEW_RES=68;
    ELSE IF ALC_RES IN (690:699) THEN NEW_RES=69;

    ELSE IF ALC_RES IN (700:709) THEN NEW_RES=70;
    ELSE IF ALC_RES IN (710:719) THEN NEW_RES=71;
    ELSE IF ALC_RES IN (720:729) THEN NEW_RES=72;
    ELSE IF ALC_RES IN (730:739) THEN NEW_RES=73;
    ELSE IF ALC_RES IN (740:749) THEN NEW_RES=74;
    ELSE IF ALC_RES IN (750:759) THEN NEW_RES=75;
    ELSE IF ALC_RES IN (760:769) THEN NEW_RES=76;
    ELSE IF ALC_RES IN (770:779) THEN NEW_RES=77;
    ELSE IF ALC_RES IN (780:789) THEN NEW_RES=78;
    ELSE IF ALC_RES IN (790:799) THEN NEW_RES=79;

    ELSE IF ALC_RES IN (800:809) THEN NEW_RES=80;
    ELSE IF ALC_RES IN (810:819) THEN NEW_RES=81;
    ELSE IF ALC_RES IN (820:829) THEN NEW_RES=82;
    ELSE IF ALC_RES IN (830:839) THEN NEW_RES=83;
    ELSE IF ALC_RES IN (840:849) THEN NEW_RES=84;
    ELSE IF ALC_RES IN (850:859) THEN NEW_RES=85;
    ELSE IF ALC_RES IN (860:869) THEN NEW_RES=86;
    ELSE IF ALC_RES IN (870:879) THEN NEW_RES=87;
    ELSE IF ALC_RES IN (880:889) THEN NEW_RES=88;
    ELSE IF ALC_RES IN (890:899) THEN NEW_RES=89;

    ELSE IF ALC_RES IN (900:909) THEN NEW_RES=90;
    ELSE IF ALC_RES IN (910:919) THEN NEW_RES=91;
    ELSE IF ALC_RES IN (920:929) THEN NEW_RES=92;
    ELSE IF ALC_RES IN (930:939) THEN NEW_RES=93;

    ELSE IF ALC_RES=940 THEN NEW_RES=94;  /* .94 AND ABOVE */

    ELSE IF ALC_RES=995 THEN NEW_RES=95;  /* NOT REPORTED */
    ELSE IF ALC_RES=996 THEN NEW_RES=96;  /* TEST NOT GIVEN */
    ELSE IF ALC_RES=997 THEN NEW_RES=97;  /* AC TEST PERFORMED, RESULTS UNKNOWN */
    ELSE IF ALC_RES=998 THEN NEW_RES=98;  /* POSITIVE READING WITH NO ACTUAL VALUE */
    ELSE IF ALC_RES=999 THEN NEW_RES=99;  /* UNKNOWN IF TESTED */

    ALC_RES=NEW_RES;  /* REASSIGN ALC_RES WITH THE NEW VALUE */
  END;  /* END ALC_RES REALIGNMENT */

  IF PER_TYP IN (1,2,3,9,5,6,7) AND INJ_SEV=4 THEN OUTPUT PED;  /* OUTPUT TO PED FILE */
  ELSE IF PER_TYP=0 THEN OUTPUT DRV;  /* OUTPUT TO DRIVER FILE */
RUN;

/* GET VEHICLES, ALONG WITH ANY ASSOCIATED DRIVER DATA */
DATA VEH;
  MERGE FARS&Y..VEHICLE (KEEP=ST_CASE VEH_NO MAKE MODEL MOD_YEAR BODY_TYP SPEEDREL TRAV_SP
	                          HIT_RUN REG_STAT OWNER GVWR M_HARM IMPACT1 DEATHS DR_ZIP PREV_ACC
	                          PREV_SUS PREV_DWI PREV_SPD PREV_OTH FIRST_YR LAST_YR ACC_TYPE VSPD_LIM IN=A)
        DRV;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* ATTACH ACCIDENT DATA TO PED DATA */
DATA ACC_PED;
  MERGE FARS&Y..ACCIDENT (KEEP=ST_CASE STATE CITY COUNTY VE_FORMS HARM_EV FUNC_SYS RUR_URB
                               LGT_COND WEATHER LATITUDE LONGITUD)
        PED (IN=A);
  BY ST_CASE;
  IF A;
RUN;

/* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO */
DATA PED1;
  SET ACC_PED;
  /* RENAME THE PED'S STRIKING VEHICLE NUMBER (N_MOT_NO OR STR_VEH) TO VEH_NO 
     SO THAT IT CAN BE MERGED WITH THEIR STRIKING VEHICLE */
  RENAME STR_VEH=VEH_NO;
RUN;
  
PROC SORT DATA=PED1; BY ST_CASE VEH_NO;  RUN;

/* ATTACH VEHICLE/DRIVER DATA TO PED FATALITIES */
DATA PED_VEH;
  MERGE VEH
        PED1 (IN=A);
  BY ST_CASE VEH_NO;
  IF A;
  YEAR=&Y;  /* DATA YEAR */
RUN;

/* DRIVER VIOLATIONS CHARGED WENT TO PICK ALL THAT APPLIES IN 2010 */
/* GET ALL VIOLATIONS CHARGED FOR STRIKING VEHICLE DRIVERS */
DATA VIOL;
  MERGE PED_VEH (KEEP=ST_CASE VEH_NO IN=A)
        FARS&Y..VIOLATN;
  BY ST_CASE VEH_NO;
  IF A;
RUN;

/* TRANSPOSE THE VIOL DATASET SO THAT THERE IS A SEPARATE VIOLATION DATA ELEMENT FOR EACH VIOLATION */ 
PROC TRANSPOSE DATA=VIOL OUT=TRANS_VIOL (DROP=_NAME_ _LABEL_) PREFIX=VIOLCHG;
  BY ST_CASE VEH_NO;
  VAR MVIOLATN;
RUN;

/* A SURVEY OF THE DATA FROM 2010 TO 2017 SHOWED THAT THE MAXIMUM
   NUMBER OF VIOLATIONS CODED FOR A VEHICLE/DRIVER WHO STRUCK A PED
   WAS 9. SO CREATE 9 VARIABLES FOR VIOLATIONS - VIOLCHG1-VIOLCHG9 */
DATA VIOL_RETAIN;
  RETAIN ST_CASE VEH_NO VIOLCHG1-VIOLCHG9 .;
  SET TRANS_VIOL;
RUN;

/* FINISHED WITH VIOLATIONS CHARGED */

/* ATTACH VIOLATIONS CHARGED DATA ELEMENTS TO THE PED_VEH DATASET */
DATA PED_VEH1;
  MERGE PED_VEH (IN=A)
        VIOL_RETAIN;
  BY ST_CASE;
  IF A;
RUN;

PROC APPEND BASE=PEDS_2015_2017 DATA=PED_VEH1 FORCE;  RUN;

%END;  /* END 2015 - 2017 */

/***********************************************************************/

%END;  /* END MACRO LOOP */
%MEND REPEAT;  /* END MACRO */

%REPEAT;  /* CALL MACRO - PROCESS CODE WITHIN THE MACRO */ 

/* PEDESTRIAN AND PEDALCYCLIST FATALITY DATASET FOR ALL YEARS (2001-2017) */
DATA PED_FATS1;
  SET PEDS_2015_2017
      PEDS_2010_2014
      PEDS_2009
      PEDS_2001_2008;
RUN;

/* GET COUNTY AND CITY NAMES */

/* LOCATION OF CITY AND COUNTY NAMES DATASET */
LIBNAME CITYCNTY 'C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\SAS Programs\Old SAS Programs';  /* LOCATION OF CITY NAME (CITY) ANC COUNTY NAME (COUNTY) SAS DATASETS ON TONJA'S LOCAL NETWORK */

/* GET COUNTY NAMES */

PROC SORT DATA=PED_FATS1;  BY STATE COUNTY;  RUN;

DATA PED_FATS_COUNTY;
  MERGE PED_FATS1 (IN=A)
        CITYCNTY.county (IN=B);
  BY STATE;
  IF A;
  IF NOT B THEN CNTYNAME='ZZ NO DECODE FOR THIS COUNTY';
RUN;

/* GET CITYNAMES */

PROC SORT DATA=PED_FATS1;  BY STATE CITY;  RUN;

DATA PED_FATS_CITY_COUNTY;
  MERGE PED_FATS_COUNTY (IN=A)
        CITYCNTY.county (IN=B);
  BY STATE CITY;
  IF A;
  IF NOT B THEN CITYNAME='ZZ NO DECODE FOR THIS CITY';
RUN;

/******************************************************************/
*COULD NOT FIGURE OUT HOW TO GET COUNTY AND CITY NAMES;

/* CREATE DERIVED DATA ELEMENTS WHERE NEEDED TO SMOOTH OUT DATA THROUGH THE YEARS */
DATA OUT.PED_FATS;
  SET PED_FATS1;

  /* ACCOUNT FOR CHANGE IN AGE ATTRIBUTES IN 2009/2010 */
  IF YEAR>2008 THEN DO;
     /* PEDESTRIAN/PEDALCYCLIST AGE */
     IF 97<=AGE<=120 THEN AGE=97;
     ELSE IF AGE IN (998,999) THEN AGE=99;
     /* STRIKING DRIVER'S AGE */
     IF 97<=DRV_AGE<=120 THEN DRV_AGE=97;
     ELSE IF DRV_AGE IN (998,999) THEN DRV_AGE=99;
  END;

  /*********************************************************************/

  /* SEX - ASSIGN NOT REPORTED TO UNKNOWN FOR PED AND DRIVER SEX */
  IF SEX=8 THEN SEX=9;  /* NOT REPORTED (8) WAS INTRODUCED IN 2010 */
  IF DRV_SEX=8 THEN DRV_SEX=9;  /* NOT REPORTED (8) WAS INTRODUCED IN 2010 */

  /*********************************************************************/

  /* HISPANIC ORIGIN AND RACE CLASSIFICATIONS - ONLY CODED FOR FATALITIES */
  /* USE THE OMB CLASSIFICATIONS (HRACE) */

  IF HISPANIC=7 THEN HISP=1;  /* NON-HISPANIC */
  ELSE IF HISPANIC IN (1:6) THEN HISP=2;  /* HISPANIC */
  /* 0 IS TO COVER FOR ERRONEOUS CODES IN 1999 AND 9 IN 2002 */
  ELSE IF HISPANIC IN (0,9,99) THEN HISP=3; 

  IF RACE IN (0,9) THEN RACE=99; /* CORRECTING ERRONEOUS CODES ON FILE */

  /* RACE CATEGORIES */
  IF RACE=1 THEN RCAT=1;        /* WHITE */
  ELSE IF RACE=2 THEN RCAT=2;   /* BLACK */
  ELSE IF RACE=3 THEN RCAT=3;   /* AMERICAN INDIAN */
  ELSE IF RACE IN (4,5,7,18,28,48) THEN RCAT=4;   /* ASIAN */
  ELSE IF RACE IN (6,38,58) THEN RCAT=5;   /* PACIFIC ISLANDER */
  ELSE IF RACE=97 THEN RCAT=6;   /* MIXED RACE */ 
  ELSE IF RACE IN (19,68,78,98) THEN RCAT=7;   /* ALL OTHER RACES */ 
  ELSE IF RACE=99 THEN RCAT=8;   /* UNKNOWN */

  /* HISPANIC AND RACE */
  IF HISP=2 THEN HRACE=1;  /* Hispanic */
  ELSE IF HISP=1 AND RCAT=1 THEN HRACE=2;  /* White, Non-Hispanic */
  ELSE IF HISP=1 AND RCAT=2 THEN HRACE=3;  /* Black, Non-Hispanic */
  ELSE IF RCAT=3 THEN HRACE=4;  /* American Indian, Non-Hispanic/Unknown */
  ELSE IF RCAT=4 THEN HRACE=5; /* Asian, Non-Hispanic/Unknown */
  ELSE IF RCAT=5 THEN HRACE=6; /* Pacific Islander, Non-Hispanic/Unknown */
  ELSE IF RCAT=6 THEN HRACE=7;  /* Multiple Races, Non-Hispanic/Unknown */
  ELSE IF HISP=1 OR 1<=RCAT<=7 THEN HRACE=8;  /* All Other Non-hispanic or Race */
  ELSE HRACE=9;  /* Unknown */

  /*********************************************************************/

  /* NONMOTORIST LOCATION */
  /* 2010 AND LATER CODING DIFFERS FROM 2009 AND EARLIER CODING */

  /*********************************************************************/

  /* LAND USE */
  IF YEAR IN (2001:2014) THEN DO;
    IF ROAD_FNC IN (1,2,3,4,5,6,9) THEN LANDUSE=1;  /* RURAL */
    ELSE IF ROAD_FNC IN (11,12,13,14,15,16,19) THEN LANDUSE=2;  /* URBAN */
    ELSE IF ROAD_FNC=99 THEN LANDUSE=3;  /* UNKNOWN */
  END;
  ELSE IF YEAR>2014 THEN DO;
    IF RUR_URB=1 THEN LANDUSE=1;  /* RURAL */
    ELSE IF RUR_URB=2 THEN LANDUSE=2;  /* URBAN */
    ELSE IF RUR_URB IN (6,8,9) THEN LANDUSE=3;  /* UNKNOWN */
  END;

  /*********************************************************************/

  /* STRIKING VEHICLE TYPES - APPLIES TO 1991 AND LATER CODES */
  IF BODY_TYP IN (1:11,17) THEN BODY=1;  /* PASSENGER CARS */
  /* LIGHT TRUCKS AND VANS */
  ELSE IF BODY_TYP IN (14,15,16,19,20,21,22,24,25,28,29,30,31,32,33,34,
    39,40,41,45,48,49) OR (BODY_TYP=79 AND TOW_VEH IN (0,9)) THEN DO;
    IF 30<=BODY_TYP<=39 THEN BODY=2;  /* PICKUP, 34 NEW IN 2017 */
    ELSE IF 14<=BODY_TYP<=19 THEN BODY=3;  /* SUV */
    ELSE IF BODY_TYP IN (20,21,22,24,25,28,29) THEN BODY=4;  /* VAN */
    ELSE BODY=5;  /* OTHER/UNKNOWN LIGHT TRUCK */
  END;
  ELSE IF BODY_TYP IN (60,61,62,63,64,66,67,71,72,78) OR
    (BODY_TYP=79 AND (1<=TOW_VEH<=4)) THEN BODY=6;  /* LARGE TRUCKS */
  ELSE IF BODY_TYP IN (80:89) THEN BODY=7;  /* MOTORCYCLES, 84-87 NEW IN  2017 */
  ELSE IF BODY_TYP IN (50,51,52,55,58,59) THEN BODY=8;  /* BUSES, 55 NEW IN 2011 */
  /* OTHER UNKNOWN VEHICLES */
  ELSE IF BODY_TYP IN (12,13,23,42,65,73,90,91,92,93,94,95,96,97,98,99) THEN BODY=9; /* 98 NEW IN 2010; 95 IN 2012; 96 NEW IN 2017 */
  ELSE IF BODY_TYP=. THEN BODY=10;  /* MISSING, NO MATCHING STRIKING VEHICLE */

  /*********************************************************************/

  /* POSTED SPEED LIMIT */
  /* PRIOR TO 2010, POSTED SPEED LIMIT WAS CODED ON THE ACCIDENT LEVEL
     SINCE 2010, POSTED SPEED LIMIT IS CODED ON THE VEHICLE LEVEL */
  IF YEAR IN (2001:2009) THEN DO;
    IF SP_LIMIT=0 THEN SPD_LIM=0;  /* NO STATUTORY LIMIT */
    ELSE IF SP_LIMIT IN (1:98) THEN SPD_LIM=SP_LIMIT;  /* ACTUAL SPEED LIMIT */
    ELSE IF SP_LIMIT=99 THEN SPD_LIM=99;  /* UNKNOWN */
  END;
  ELSE IF YEAR>=2010 THEN DO;
    IF VSPD_LIM=0 THEN SPD_LIM=0;  /* NO STATUTORY LIMIT */
    ELSE IF VSPD_LIM IN (1:97) THEN SPD_LIM=VSPD_LIM;  /* ACTUAL SPEED LIMIT */
    ELSE IF VSPD_LIM IN (98,99) THEN SPD_LIM=99;  /* UNKNOWN */
  END;

  /* SPEEDING DRIVERS */
  IF YEAR IN (2001:2007) THEN DO;
    IF DR_CF1 IN (44,46) OR DR_CF2 IN (44,46) OR DR_CF3 IN (44,46) OR
       DR_CF4 IN (44,46) THEN SPEED_DRV=1;  /* SPEEDING DRIVER */
    ELSE SPEED_DRV=0;  /* ALL OTHER DRIVERS */
  END;
  ELSE IF YEAR=2008 THEN DO;
    IF DR_CF1 IN (43,44,46) OR DR_CF2 IN (43,44,46) OR DR_CF3 IN (43,44,46) OR
       DR_CF4 IN (43,44,46) THEN SPEED_DRV=1;  /* SPEEDING DRIVER */
    ELSE SPEED_DRV=0;  /* ALL OTHER DRIVERS */
  END;
  ELSE IF YEAR IN (2009:2012) THEN DO;
    IF SPEEDREL=1 THEN SPEED_DRV=1;  /* SPEEDING DRIVER */
    ELSE SPEED_DRV=0;  /* ALL OTHER DRIVERS - INCLUDES UNKNOWNS */
  END;
  ELSE IF YEAR>2012 THEN DO;
    IF SPEEDREL IN (2,3,4,5) THEN SPEED_DRV=1;  /* SPEEDING DRIVER */
    ELSE SPEED_DRV=0;  /* ALL OTHER DRIVERS - INCLUDES UNKNOWNS */
  END;

  /*********************************************************************/
  
  /* HIT AND RUN VEHICLES */
  IF YEAR IN (2001:2008) THEN DO;
    IF HIT_RUN IN (1:5) THEN HITRUN_DRV=1;  /* HIT-AND-RUN DRIVER */
    ELSE HITRUN_DRV=0;  /* ALL OTHER DRIVERS */
  END;
  ELSE IF YEAR>2008 THEN DO;
    IF HIT_RUN=1 THEN HITRUN_DRV=1;  /* HIT-AND-RUN DRIVER */
    ELSE HITRUN_DRV=0;  /* ALL OTHER DRIVERS - INCLUDES UNKNOWNS */
  END;

  /*********************************************************************/

  /* STRIKING VEHICLE DRIVER'S RESTRAINT USE */
  /* RESTRAINT USE - USE FOR ALL OCCUPANTS EXCEPT MOTORCYCLISTS */
  IF BODY IN (1:6,8,9) THEN DO;
    IF YEAR IN (2001:2009) THEN DO;
      IF REST_USE IN (1,2,3,4,8,10,11,12,13,14) THEN REST=1;  /* BELTED, EXCLUDES HELMETS; 10, 11, 12 ADDED IN 2008 */
      ELSE IF REST_USE IN (0,5,6,15) THEN REST=2;  /* NOT BELTED, INCLUDES HELMETS */
      ELSE IF REST_USE=99 THEN REST=3;  /* UNKNOWN */
    END;
    ELSE IF YEAR>2009 THEN DO;
      IF REST_USE IN (1,2,3,4,8,10,11,12,97) THEN REST=1;  /* BELTED, EXCLUDES HELMETS */
      ELSE IF REST_USE IN (0,5,7,16,17,19,20) THEN REST=2;  /* NOT BELTED, INCLUDES HELMETS, 20 ADDED IN 2017 */
      ELSE IF REST_USE IN (29,98,99) THEN REST=3;  /* UNKNOWN */
    END;
  END;
  /* HELMET USE FOR MOTORCYCLISTS */
  ELSE IF BODY=7 THEN DO;
    IF YEAR IN (2001:2009) THEN DO;
      IF REST_USE IN (5,8) THEN REST=1; /* HELMETED */
      ELSE IF REST_USE IN (0,1,2,3,4,6,10,11,12,13,14,15) THEN REST=2;  /* UNHELMETED INCLUDES IMPROPERLY HELMETED AND BELTS; 10, 11, 12 ADDED IN 2008 */
      ELSE IF REST_USE=99 THEN REST=3;  /* UNKNOWN */
    END;
    ELSE IF YEAR>2009 THEN DO;
      IF REST_USE IN (5,8,16,19,97) AND REST_MIS=0 THEN REST=1;  /* HELMETED AND NOT MISUSED; 19 ADDED IN 2013 */
      ELSE IF REST_USE IN (0,1,2,3,4,7,10,11,12,17,20) OR (REST_USE IN (5,8,16,19,97) AND REST_MIS=1) THEN REST=2;  /* UNHELMETED INCLUDES BELTS; 19 ADDED IN 2013, 20 ADDED IN 2017 */
      ELSE IF REST_USE IN (29,98,99) THEN REST=3;  /* UNKNOWN; 29 ADDED IN 2013 */
    END;
  END;

  /*********************************************************************/

  /* ALCOHOL TEST RESULTS */
  IF YEAR IN (2001:2014) THEN DO;
    /* PEDS */
    IF 0<ALC_RES<=94 OR (YEAR>=2004 AND ALC_RES=98) THEN PED_ALCRES=1;  /* TESTED WITH KNOWN RESULTS  */
    ELSE IF ALC_RES=97 THEN PED_ALCRES=2;  /* TESTED WITH UNKNOWN RESULTS */
    ELSE IF ALC_RES=96 OR (YEAR<=2009 AND ALC_RES=95) THEN PED_ALCRES=3;  /* NOT TESTED */
    ELSE IF ALC_RES=99 OR (YEAR>=2010 AND ALC_RES=95) THEN PED_ALCRES=4;  /* UNKNOWN IF TESTED */
    /* DRIVERS */
    IF 0<DRV_ALC_RES<=94 OR (YEAR>=2004 AND DRV_ALC_RES=98) THEN DRV_ALCRES=1;  /* TESTED WITH KNOWN RESULTS  */
    ELSE IF DRV_ALC_RES=97 THEN DRV_ALCRES=2;  /* TESTED WITH UNKNOWN RESULTS */
    ELSE IF DRV_ALC_RES=96 OR (YEAR<=2009 AND DRV_ALC_RES=95) THEN DRV_ALCRES=3;  /* NOT TESTED */
    ELSE IF DRV_ALC_RES=99 OR (YEAR>=2010 AND DRV_ALC_RES=95) THEN DRV_ALCRES=4;  /* UNKNOWN IF TESTED */
  END;

  ELSE IF YEAR>=2015 THEN DO;
    /* PEDS */
    IF ALC_RES IN (0:940,998) THEN PED_ALCRES=1;  /* TESTED WITH KNOWN RESULTS  */
    ELSE IF ALC_RES=997 THEN PED_ALCRES=2;  /* TESTED WITH UNKNOWN RESULTS */
    ELSE IF ALC_RES=996 THEN PED_ALCRES=3;  /* NOT TESTED */
    ELSE IF ALC_RES IN (995,999) THEN PED_ALCRES=4;  /* UNKNOWN IF TESTED */
    /* DRIVERS */
    IF DRV_ALC_RES IN (0:940,998) THEN DRV_ALCRES=1;  /* TESTED WITH KNOWN RESULTS  */
    ELSE IF DRV_ALC_RES=997 THEN DRV_ALCRES=2;  /* TESTED WITH UNKNOWN RESULTS */
    ELSE IF DRV_ALC_RES=996 THEN DRV_ALCRES=3;  /* NOT TESTED */
    ELSE IF DRV_ALC_RES IN (995,999) THEN DRV_ALCRES=4;  /* UNKNOWN IF TESTED */
  END;
RUN;

/***********************************************************************/

OPTIONS NODATE PS=66 LS=165 NOCENTER;
ODS LISTING;

/* CHECK THAT THE PED_FATS DATASET CONTAINS ALL PEDESTRIAN AND PEDALCYCLIST FATALITIES */

PROC TABULATE DATA=OUT.PED_FATS FORMAT=COMMA10. MISSING;
  FORMAT PER_TYP PERFMT. BODY BODYFMT.;
  CLASS YEAR STATE PER_TYP BODY LOCATION;
  TABLE YEAR=' ', PER_TYP=' ' ALL / BOX='Crash Year' RTS=15;
  TABLE YEAR=' ', BODY='Striking Vehicle' ALL / BOX='Crash Year' RTS=15;
  TABLE YEAR=' ', LOCATION='Nonmotorist Location' ALL / BOX='Crash Year' RTS=15;
  TABLE STATE=' ' ALL, PER_TYP=' ' ALL / BOX='Crash Year' RTS=15;
  KEYLABEL N=' ' ALL='Total';
  TITLE 'PEDESTRIAN AND PEDALCYCLIST FATALITIES, 2001-2017';
RUN;

proc freq data=OUT.PED_FATS;
tables city;
run;
Proc Contents Data=OUT.PED_FATS;
Run;

*Sub-set the dataset to Years 2010-2017. Remember population and population density is available for 2010-2016;
Data Traffic_Fats;
	set OUT.PED_FATS;
	if year<2010 then delete;
	else if year>2016 then delete;

*Clean Data;
	If TRAV_SP in (997 998 999) then TRAV_SP=.;
	If ALC_RES = 99 then ALC_RES=.;
	If SPD_LIM = 99 then SPD_LIM=.;
	If WEATHER = 9 then WEATHER=.;

*Create Function System Classification Variable;
	If ROAD_FNC=. then Func_System=.;
	else if ROAD_FNC= " " then Func_System=.;
	else If ROAD_FNC = 1 then Func_System=1;
	else if ROAD_FNC = 2 then Func_System=2;
	else if ROAD_FNC = 3 then Func_System=3;
	else if ROAD_FNC = 4 then Func_System=4;
	else if ROAD_FNC = 5 then Func_System=5;
	else if ROAD_FNC = 6 then Func_System=6;
	else if ROAD_FNC = 9 then Func_System=7;

	else if ROAD_FNC = 11 then Func_System=1;
	else if ROAD_FNC = 12 then Func_System=8;
	else if ROAD_FNC = 13 then Func_System=2;
	else if ROAD_FNC = 14 then Func_System=3;
	else if ROAD_FNC = 15 then Func_System=9;
	else if ROAD_FNC = 16 then Func_System=6;
	else if ROAD_FNC = 19 then Func_System=7;
	else if ROAD_FNC = 99 then Func_System=7;

* Create Census Urban/Rural Categories;
	If ROAD_FNC = . then Census_UR=.;
	else if ROAD_FNC = " " then Census_UR=.;
	else If ROAD_FNC = 1 then Census_UR=1;
	else if ROAD_FNC = 2 then Census_UR=1;
	else if ROAD_FNC = 3 then Census_UR=1;
	else if ROAD_FNC = 4 then Census_UR=1;
	else if ROAD_FNC = 5 then Census_UR=1;
	else if ROAD_FNC = 6 then Census_UR=1;
	else if ROAD_FNC = 9 then Census_UR=1;

	else if ROAD_FNC = 11 then Census_UR=2;
	else if ROAD_FNC = 12 then Census_UR=2;
	else if ROAD_FNC = 13 then Census_UR=2;
	else if ROAD_FNC = 14 then Census_UR=2;
	else if ROAD_FNC = 15 then Census_UR=2;
	else if ROAD_FNC = 16 then Census_UR=2;
	else if ROAD_FNC = 19 then Census_UR=2;
	else if ROAD_FNC = 99 then Census_UR=2;

*Specify Occupant vs. Non-Occupant;
	if per_typ in (5 6 7) then Motorist=0;
	else if per_typ in (1 2 3 9) then Motorist=1;

*Label Speeding Limit;
	label SPD_LIM="Recorded Speed Limit";

Run;

Proc format;
Value Func_fmt
	. = 'Missing'
	1 = 'Principal Arterial-Interstate'
	2 = 'Other Principal Arterials'
	3 = 'Minor Arterial'
	4 = 'Major Collector'
	5 = 'Minor Collector'
	6 = 'Local Road or Street'
	7 = 'Unknown'
	8 = 'Principal Arterial-Other Freeways or Expressways'
	9 = 'Non-specified Collector';

Value Census_UR_fmt
	. = 'Missing'
	1 = 'Rural'
	2 = 'Urban';

Value Motorist_fmt
	0 = 'Non-Motorist'
	1 = 'Motorist';
Run;
*
*
*
*
*
***** D E S C R I P T I V E 		S T A T I S T I C S *******
*
*
*
*
*Assess distribution of age;
Proc univariate data=Traffic_Fats;
var Age;
Histogram/Normal;
Run;

*Assess Means;
Proc means mean std median data=Traffic_Fats;
var AGE ALC_RES SPD_LIM TRAV_SP;
Run;

* Know that Alcohol Results need to be a percentage. So 98 = 0.098% BAC;
Proc Print data=Traffic_Fats;
var ALC_RES;
where ALC_RES=98;
Run;

*Look at frequencies of functional class system;
*Recognized that Census Rural/Urban are not available for years 2015-2017 ;
Proc freq data=Traffic_Fats;
Tables per_typ Census_UR BODY Func_System LGT_COND WEATHER;
FORMAT Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt. ;
Run;

Proc freq data=Traffic_Fats;
Tables Year;
Run;

Proc freq data=Traffic_Fats;
	tables per_typ;
	format per_typ perfmt.;
Run;

Proc freq data=Traffic_Fats;
	tables Motorist;
	format Motorist Motorist_fmt.;
Run;

*Assess FARS summary variables for only non-motorist FARS data;

Data Traffic_Fats_Sub;
	set Traffic_Fats;

	If Motorist=1 then delete;
Run;

Proc freq data=Traffic_Fats_Sub;
	tables Motorist;
	format Motorist Motorist_fmt.;
Run;

Proc Contents data=Traffic_Fats;
run;

*
*
*
*
*
*
***** SUMMARIZE PERSON TYPES BY COUNTY ******
*
*
*
*
*
* Proc Summary in order to Aggregate By State, and County;
Data Traffic_Fats;
	set Traffic_Fats;
	If Year<2010 then delete;
	else if Year>2016 then delete;
Run;
Proc Sort Data=Traffic_Fats;
	by Year State County;
Run;

Proc freq data=Traffic_Fats;
	tables per_typ;
	by year;
Run;

Proc contents data=Traffic_Fats;
run;

******************* AGGREGATE BY COUNTY***************************;

Proc Summary Data=Traffic_Fats;
	Var Per_Typ;
	by Year State County;
	output out=County_Sum  n=Traffic_Fatal; *Aggregate all traffic fatalities by county and year;
Run;

Data County_Sum3;
	set County_Sum (drop=_type_ _freq_);
	Length State_Name $54;

	Rename County=FARS_code;

	IF State=1 then State_Name="Alabama";
	IF State=2 then State_Name="Alaska";
	IF State=4 then State_Name="Arizona";
	IF State=5 then State_Name="Arkansas";
	IF State=6 then State_Name="California";
	IF State=8 then State_Name="Colorado";
	If State=9 then State_Name="Connecticut";
	IF State=10 then State_Name="Delaware";
	IF State=11 then State_Name="DC";
	IF State=12 then State_Name="Florida";
	IF State=13 then State_Name="Georgia";
	IF State=15 then State_Name="Hawaii";
	IF State=16 then State_Name="Idaho";
	IF State=17 then State_Name="Illinois";
	IF State=18 then State_Name="Indiana";
	IF State=19 then State_Name="Iowa";
	IF State=20 then State_Name="Kansas";
	IF State=21 then State_Name="Kentucky";
	IF State=22 then State_Name="Louisiana";
	IF State=23 then State_Name="Maine";
	IF State=24 then State_Name="Maryland";
	IF State=25 then State_Name="Massachusetts";
	IF State=26 then State_Name="Michigan";
	IF State=27 then State_Name="Minnesota";
	IF State=28 then State_Name="Mississippi";
	IF State=29 then State_Name="Missouri";
	IF State=30 then State_Name="Montana";
	IF State=31 then State_Name="Nebraska";
	IF State=32 then State_Name="Nevada";
	IF State=33 then State_Name="New Hampshire";
	IF State=34 then State_Name="New Jersey";
	IF State=35 then State_Name="New Mexico";
	IF State=36 then State_Name="New York";
	IF State=37 then State_Name="North Carolina";
	IF State=38 then State_Name="North Dakota";
	IF State=39 then State_Name="Ohio";
	IF State=40 then State_Name="Oklahoma";
	IF State=41 then State_Name="Oregon";
	IF State=42 then State_Name="Pennsylvania";
	IF State=44 then State_Name="Rhode Island";
	IF State=45 then State_Name="South Carolina";
	IF State=46 then State_Name="South Dakota";
	IF State=47 then State_Name="Tennessee";
	IF State=48 then State_Name="Texas";
	IF State=49 then State_Name="Utah";
	IF State=50 then State_Name="Vermont";
	IF State=51 then State_Name="Virginia";
	IF State=53 then State_Name="Washington";
	IF State=54 then State_Name="West Virginia";
	IF State=55 then State_Name="Wisconsin";
	IF State=56 then State_Name="Wyoming";

Run;

Proc Print data=County_Sum3 (obs=10);
var Traffic_Fatal state state_name FARS_code year;
where FARS_code=1 and Year=2010;
run;

*State_var = put(State, 8.)
    drop State
    rename State_var=State_code;

Proc Print Data=County_Sum3(obs=1);
Run;
Proc Contents Data=County_Sum3;
Run;


*
*
*
*
*
***		M E R G E 	 		D A T A S E T S *****
*
*
*
*
*
* Merging Fips Codes;
* Data available for 2010-2016, Population Counts, Density, Income, Employment, Education, Development Levels, Urban/Rural;

Data Fipscodes;
  	INFILE "C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\Datasets\FARS_Merge_FIPScodes.csv" dsd firstobs=2 truncover ;
	Length County $54 State_Name $54;
  	INPUT FIPS_code	GIS_Fips FARS_code County$ State_Name$	State_Code
;

Run;


Proc print data= Fipscodes (obs=2);
where state_code=29;
run;
Proc contents data=Fipscodes;
Run;

*Sort and Merge Datasets;
Proc sort data=Fipscodes;
	by State_Name FARS_code;
Run;
Proc sort data=County_Sum3;
	by State_Name FARS_code;
Run;

Data FARS_Fats;
	merge Fipscodes County_Sum3;
	by State_Name FARS_code;
Run;

*Double, Triple check that merge was converged correctly;
Proc Print data = FARS_Fats(obs=10);
var Fips_code GIS_Fips State_Name County FARS_code Traffic_Fatal Year;
where FARS_code=1 and year=2010;
Run;

Proc Print data = FARS_Fats(obs=10);
var Traffic_Fatal State_Name FARS_code County Fips_code Year;
Where FARS_code=1 and year=2010;
Run;

Proc Print data = County_Sum3(obs=10);
var Traffic_Fatal State_Name FARS_code Year;
Where FARS_code=1 and year=2010;
Run;

Proc print data=FARS_Fats (obs=10);
Where fips_code=56045;
run;
Proc Print data = County_Sum3(obs=10);
var Traffic_Fatal State_Name FARS_code Year;
Where FARS_code=45 and State_Name="Wyoming";
Run;

Proc Contents data=FARS_Fats;
run;
Proc print data=FARS_Fats (obs=10);
where fips_code=.;
Run;

Proc freq data=FARS_Fats;
tables State_Name FARS_code;
where fips_code=.;
run;

Data FARS_Fats_3;
	set FARS_Fats;

	Rename State=FARS_State;
	Rename County=County_Name;
	

	label FARS_code= "FARS County Codes";
	label FARS_State="FARS State Code";
	label State_Name="State Name";
	label County="County Name";
	label FIPS_code= "Official FIPS Code";
	label Traffic_Fatal="Total Traffic Fatalities";
	label Year="Year";

	If FARS_Code in ( 0 999 997) then delete;
Run;

proc contents data=FARS_Fats_2;
run;

*Correct any missing fips_codes;
Proc freq data=FARS_Fats_3;
tables State_Name FARS_code;
where fips_code=.;
run;

proc print data=FARS_Fats_3;
where fips_code=.;
run;

proc print data=FARS_Fats_3;
run;

Proc contents data=FARS_Fats_3;
run;


NVKNFSDLNFCLSDIJFIELKCDS___________________________________________________________________________;


*** Merge in Fips_code with FARS Original dataset *******;

Proc contents data=Traffic_Fats;
run;

DATA Traffic_Fats;
	SET Traffic_Fats;
	RENAME State = State_code;
	RENAME COUNTY = FARS_code;
run;

Proc sort data=Traffic_Fats;
	by State_code FARS_code;
run;

Proc sort data=Fipscodes;
	by State_code FARS_code;
run;

Data FARS_Fipscodes;
	merge Traffic_Fats Fipscodes;
	by State_code FARS_code;
run;

proc contents data=FARS_Fipscodes;
run;

proc print data= FARS_Fipscodes(obs=2);
run;

* Merge in SES Dataset and Development;
Data NMF_Data; *NMF Data derived from NHTSA Fatality Analysis Report;
  	INFILE "C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\Datasets\NonMotorist_Fatality_Data_Combined_SES_Health.csv" dsd firstobs=2 truncover ;
  	LENGTH State_Name $54 COUNTY_NAME $54 Urban_Rural_Category $54;
  	INPUT State_Name	COUNTY_NAME	Urban_Rural_Category	Fips_code	
			Year	OpioidDeath_Rate	UNEMPLOYED_RATES	NMF_Rate	
			Sti_Rate	Male_Rate	Income_Rate	Employed_Rate	
			PoorPH_Rate	Smoke_Rate	Binge_Rate	TeenB_Rate	Uninsur_Rate	
			HsGrad_Rate	CollEdu_Rate	ChildPov_Rate	AirPM_Rate	LoanAmount_000s_Rate	
			HUDIncome_Rate	MinorityPop_Rate	LoanDeliqu_Rate	HotDays_Rate	NMF_Delta	
			SES_Construct	Income_Construct	Environment_Construct	Cluster_2010	
			Cluster_2011	Cluster_2012	Cluster_2013	Cluster_2014	Cluster_2015	Cluster_2016
;
Run;


*******
***********************************************************************;

Data TigerLines; *NLCD and Tiger Lines Data derived from National Land Coverage Database and US Census Bureaur;
  	INFILE "C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\Datasets\Briana_Reformat_All_Join_Data.csv" dsd firstobs=2 truncover ;
  	INPUT GEOID	Year	Per_Snow	Dev_OS	Dev_Low	Dev_Med	Dev_High	Barr_Land	Decid_For	Ever_For	
			Mixed_For	Shrub	Herb	Hay	Cult_Crop	Wood_Wet	Herb_Wet	Pop	S140	S120	S110	
			S163	S174	S164	S175	S150	S173	S178	S171	S183	S182	S172
;
	Rename GEOID=Fips_code;
Run;

Proc sort data=NMF_Data;
	by Fips_code Year;
run;
Proc sort data=TigerLines ;
	by Fips_code Year;
run;
Proc sort data=FARS_Fats_3;
	by Fips_code Year;
run;

Data FARS_SES_Dev_Data;
	merge NMF_Data TigerLines FARS_Fats_3;
	by Fips_code Year;
	keep Year State_Name COUNTY_NAME FIPS_code FARS_code Traffic_Fatal NMF_Rate Pop Urban_Rural_Category 
			Income_Rate Employed_Rate HsGrad_Rate CollEdu_Rate ChildPov_Rate MinorityPop_Rate
			Pop Dev_OS Dev_Low Dev_Med Dev_High S140	S120	S110	
			S163	S174	S164	S175	S150	S173	S178	S171	S183	S182	S172;

	If Traffic_Fatal=. then Traffic_Fatal=0;

	label S140="Local Neighborhood Road";
	label S120="Secondary Road";
	label S110="Primary Road";
	label S163="Ramp";
	label S174="Private Raod for service vehicles";
	label S164="Serivce Drive";
	label S175="Internal US Census Bureau Use";
	label S150="Vehicular Trail";
	label S173="Alley";
	label S178="Parking Lot";
	label S171="Walkway/Pedestrian Trail";
	label S183="Bridle Path";
	label S182="Bike Path or Trail";
	label S172="Stairway";
run;

proc print data=FARS_SES_Dev_Data (obs=10);
where state_name="Missouri";
Run;

*Merge in population density;
*Importing one more dataset for population density and migration data;
Data Migration_PopDens_Data; 
  	INFILE "C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\Datasets\Migration_PopulationDensity_Data_By_County.csv" dsd firstobs=2 truncover ;
  	INPUT Fips_Code	County_Name	sqml INTERNATIONALMIG2010	INTERNATIONALMIG2011	
			INTERNATIONALMIG2012	INTERNATIONALMIG2013	INTERNATIONALMIG2014	
			INTERNATIONALMIG2015	INTERNATIONALMIG2016	INTERNATIONALMIG2017	
			INTERNATIONALMIG2018	DOMESTICMIG2010	DOMESTICMIG2011	DOMESTICMIG2012	
			DOMESTICMIG2013	DOMESTICMIG2014	DOMESTICMIG2015	DOMESTICMIG2016	pop_den_2010	
			pop_den_2011	pop_den_2012	pop_den_2013	pop_den_2014	pop_den_2015	
			pop_den_2016

;
Run;

*Transpose Data from wide to long, Needed to sort first;
Proc sort data=Migration_PopDens_Data;
by fips_code;
Run;

Proc Transpose data=Migration_PopDens_Data out=long_IntMig prefix=INTERNATIONALMIG;
   by fips_code;
   var INTERNATIONALMIG2010-INTERNATIONALMIG2016;
run;
Proc Transpose data=Migration_PopDens_Data out=long_DomMig prefix=DOMESTICMIG;
   by fips_code;
   var DOMESTICMIG2010-DOMESTICMIG2016;
run;
Proc Transpose data=Migration_PopDens_Data out=long_PopDen prefix=pop_den;
   by fips_code;
   var pop_den_2010-pop_den_2016;
run;

*Merge Transposed Datasets;
Data Migration_PopDens_Long2;
   merge long_IntMig (drop=_name_ rename=(INTERNATIONALMIG1=Intern_Migration)) 
		 long_DomMig(drop=_name_ rename=(DOMESTICMIG1=Domestic_Migration))
		 long_PopDen(rename=(pop_den1=Pop_Dens)) Migration_PopDens_Data;
   by fips_code;
   Year=input(substr(_name_, 9), 4.);
   Drop _name_ County_Name INTERNATIONALMIG2010	INTERNATIONALMIG2011	
			INTERNATIONALMIG2012	INTERNATIONALMIG2013	INTERNATIONALMIG2014	
			INTERNATIONALMIG2015	INTERNATIONALMIG2016	INTERNATIONALMIG2017	
			INTERNATIONALMIG2018	DOMESTICMIG2010	DOMESTICMIG2011	DOMESTICMIG2012	
			DOMESTICMIG2013	DOMESTICMIG2014	DOMESTICMIG2015	DOMESTICMIG2016	pop_den_2010	
			pop_den_2011	pop_den_2012	pop_den_2013	pop_den_2014	pop_den_2015	
			pop_den_2016;
run;

Proc Print Data=Migration_PopDens_Long2 (obs=2);
Run;

Proc Sort data=Migration_PopDens_Long2;
	by fips_code year;
Run;

Data FARS_SES_Dev_Data3;
	merge Migration_PopDens_Long2 
			FARS_SES_Dev_Data;
	By Fips_code Year;
Run;

Proc Print data=FARS_SES_Dev_Data3 (obs=2);
where Pop_Dens ne . and fips_code=13221;
run;

*Calculate Converstions: Traffic Fatality Rates by Population and Population Density;

Data Convert_Fats;
	set FARS_SES_Dev_Data3;

	If Year<2010 then delete;
	else if Year>2017 then delete;

*SES variables;
	Income_Count=(Income_Rate*Pop)/100000;
	Employ_Count=(Employed_Rate*Pop)/100000;
	Minority_Count=(MinorityPop_Rate*Pop)/100000;
	HsGrad_Count=(HsGrad_Rate*Pop)/100000;
	College_Count=(CollEdu_Rate*Pop)/100000;
	ChildPov_Count=(ChildPov_Rate*Pop)/100000;


*Fatality variables;
	NMF_Count=(NMF_Rate*Pop)/100000;


*Rename variables;
	rename Traffic_Fatal=Traffic_Count;

*Label variables;
	label State = "State";
	label COUNTY = "County";
	label Fips_code = "Fips Code";
	label FARS_code = "FARS Code";
	label Pop="Population Count";
	label sqml="Total Square Mileage";

	label NMF_Count="NMF Count";
	label Traffic_Count='Traffic Fatality Counts';

	label Income_Count="Income Total Sum";
	label HsGrad_Count="HS Graduation Counts";
	label College_Count="College Counts";
	label Minority_Count="Minority Counts";
	label ChildPov_Count="Child Poverty Counts";
	label Intern_Migration="International Migration Counts";
	label Domestic_Migration= "Domestic Migration Counts";
	

Run;

Proc print data=Convert_Fats(obs=2);
Run;

Proc print data=Convert_Fats;
where fips_code=.;
Run;


Proc Contents Data=Convert_Fats;
Run;


**************************************************************
****************************************************************
***************************************************************
***************************************************************
**** Aggregate by County, and summarize all years together;

Proc Sort data=Convert_Fats;
	by fips_code;
Run;

Proc Summary Data=Convert_Fats;
	Var Traffic_Count ;
	by fips_code;
	output out=TrafFats_Data  sum=Traffic_CountySum_SixYears; *Aggregate all traffic fatalities by county for all SIX Years;
Run;
Proc Sort data=TrafFats_Data;
	by fips_code;
Run;

Proc Summary Data=Convert_Fats;
	Var Pop ;
	by fips_code;
	output out=Pop_Data  sum=Pop_CountySum_SixYears; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Pop_Data;
	by fips_code;
Run;

Proc Summary Data=Convert_Fats;
	Var sqml ;
	by fips_code;
	output out=sqml_data  sum=Sqml_CountySum_SixYears; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=sqml_data;
	by fips_code;
Run;

*Categorical variables aggregated;
Data Categories;
	set Convert_Fats;
	keep State_Name County_Name FIPS_code Urban_Rural_Category;
Run;
Proc Sort data=Categories;
by fips_code;
Run;

*Merge together all datasets to combine all six years of data by county; 
Data SixYear_Agg_County_Dataset;
	merge Categories Pop_Data Sqml_Data TrafFats_Data;
	by fips_code;
Run;

*Get Rid of duplicate fips_codes values;
Proc Sort Data=SixYear_Agg_County_Dataset
	Dupout=fileofduplicates NoDupkey;
	By fips_code;
Run;
Proc Print data= fileofduplicates (obs=10);
Run;

Proc print data=SixYear_Agg_County_Dataset (obs=2);
run;
Proc Contents data=SixYear_Agg_County_Dataset;
run;

*
*
*
*
*
	C O N V E R T 		C O U N T S				T O 			 R A T E S	*********
*
*
*
*;
Data Agg_Data_SixYear;
	set SixYear_Agg_County_Dataset (drop=_TYPE_ _FREQ_ );

*SES variables;
	Pop_Dens=(Pop_CountySum_SixYears/Sqml_CountySum_SixYears);
	
*Fatality variables;
	Traff_Rate=(Traffic_CountySum_SixYears/Pop_CountySum_SixYears)*100000;
	Traff_Pop_Dens=(Traffic_CountySum_SixYears/Pop_Dens);
	Traff_PerCapita=(Traffic_CountySum_SixYears/Pop_CountySum_SixYears);


*Label variables;
	label State_Name = "State";
	label County_Name = "County";
	label Fips_code = "Fips Code";
	label FARS_code = "FARS Code";
	label Urban_Rural_Category='Urban/Rural Group (CDC)';
	label Pop_Sum="Aggregated Population Count";
	label Pop_Dens='Aggregated Population Density';
	label sqml_sum="Aggregated Square Mileage";

	
	label Traffic_sum='Aggregated Traffic Fatality Counts';
	label Traff_Pop_Dens='Aggregated Traffic Fatality by Population Density';
	label Traff_Rate='Aggregated Traffic Fatality Rate, by Population (100,000 persons)';
	label Traff_PerCapita='Traffic Fatality, per Capita';

Run;

Proc Print data= Agg_Data_SixYear(obs=10);
Run;
Proc Contents data=Agg_Data_SixYear;
Run;

*Export integrated data set into raw data file, Years 2010-2017;
PROC EXPORT data=Agg_Data_SixYear
outfile="C:\Users\Briana.Thrift.ctr\Desktop\Agg_Data_SixYear.xlsx" 
dbms=xlsx
replace;
run;
/*Use the same path as above, adding a forward slash and the name of
your file.csv ( /ExampleCSV.csv )*/



**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
		

***;
Data SES_Fatal_Trans; *NLCD and Tiger Lines Data derived from National Land Coverage Database and US Census Bureaur;
  	INFILE "C:\Users\Briana.Thrift.ctr\Documents\Rural_NonOccupant\Datasets\SES_NonMotor_Fatality_Dataset2.csv" dsd firstobs=2 truncover ;
	Length Area_name $54 CDC_Urban_Rural $54;
  	INPUT FIPS_code	Area_name	YEAR	CDC_Urban_Rural	Rural_Urban_code	
			Urban_Inf_code	Metro	NonMotor_Death	Population	sqml	Pop_Dens	
			Labor_Force_Count	Employ_Count	Unemploy_Count	Unemployment_Rate	
			Pov_Count	Pov_Percent	Child_Pov	Child_Percent	Young_Pov	Young_Percent	
			Median_HH_Income	Intern_Migration	Domestic_Migration	Opioid_Death_Rate	
			Per_Snow	Dev_OS	Dev_Low	Dev_Med	Dev_High	Barr_Land	Decid_For	Ever_For	
			Mixed_For	Shrub	Herb	Hay	Cult_Crop	Wood_Wet	Herb_Wet	Pop	S140	
			S120	S110	S163	S174	S164	S175	S150	S173	S178	S171
		;
Run;

Proc Print data=SES_Fatal_Trans (obs=10);
Run;
Proc Contents data=SES_Fatal_Trans;
Run;

Data SES_Fatals;
	set SES_Fatal_Trans (Drop=Population);

*Calculate NonMotorist Death Rate, per 100,000 persons;
	NonMotor_Rate=(NonMotor_Death/Pop)*100000;
	Motor_Rate=(Motorist_Death/Pop)*100000;

*Calculate total fatal crashes;
	Total_Crashes=NonMotor_Death+Motorist_Death;
	NonMot_Rate_Crashes=(NonMotor_Death/Total_Crashes)*100;
	Crash_Rate=(Total_Crashes/Pop)*100000;


*Make missing NonMotorist Deaths 0;
	If NonMotor_Death=. then NonMotor_Death=0;
	If NonMotor_Rate=. then NonMotor_Rate=0;

	If Motorist_Death=. then Motorist_Death=0;
	If Motor_Rate=. then Motor_Rate=0;

*Create Census Urban/Rural Category;
	If Pop>=50000 then Census_UR=0;
	else if 50000>Pop>=2500 then Census_UR=1;
	Else if Pop<2500 then Census_UR=2;


*Create FHWA Urban/Rural Category;
	If Pop>=50000 then FHWA_UR=0;
	else If 50000>Pop>5000 then FHWA_UR=1;
	else FHWA_UR=2;

*Rename;
	rename Metro=OMB_Metro;
	rename Rural_Urban_code=USDA_Urban_Rural;
	rename Urban_Inf_code= USDA_Urban_Inf;

*Labeling;
	label Area_name = "Area name";
	label Census_UR = "US Census Bureau, Urban and Rural Classification";
	label CDC_Urban_Rural = "CDC Urban/Rural Taxonomy, 2013";
	label Child_Percent = "Percentage of US Citizens in Poverty, Ages 0-18";
	label Child_Pov = "Number of US Citizens in Poverty, Ages 0-18"; 
	label County_Name = "US County";
	label Domestic_Migration = "Number of Domestic Migration";  
	label Employ_Count = "Number of Employed US Citizens";
	label FIPS_code = "US FIPS code";
	label Intern_Migration = "Number of International Migration";
	label Labor_Force_Count = "Number of Civilian Labor Force";   
	label Median_HH_Income = "Median Household Income";
	label OMB_Metro = "Metro Assignment - Based on 2013 OMB Metropolitan Area delineation)";
	label NonMotor_Death = "Number of Non-Motorist Deaths";
	label NonMotor_Rate = "Rate of Non-Motorist Deaths, per 100,000 persons";
	label Motorist_Death= "Number of Motorist Deaths";
	label Motor_Rate= "Rate of Motorist Deaths, per 100,000 persons";
	label Total_Crashes= "Number of Total Fatal Crashes";
	label Crash_Rate= "Rate of Fatal Crashes, per 100,000 persons";
	label NonMot_Rate_Crashes="Non-Motorist Deaths per 100 Fatal Crashes";
	label Opioid_Death_Rate = "Rate of Opioid Deaths, per 100,000 persons";
	label Pop_Dens = "Population Density";  
	label Pop = "Population";  
	label Pov_Count = "Number of US Citizens in Poverty, All Ages";   
	label Pov_Percent = "Percent of US Citizens in Poverty, All Ages";
	label USDA_Urban_Rural = "USDA/ERS Rural-urban Continuum Code, 2013";
	label State_Name = "US State";  
	label Unemploy_Count = "Number of Unemployed US Citizens"; 
	label Unemployment_Rate = "Percent of Unemployed US Citizens";
	label USDA_Urban_Inf= "USDA/ERS Urban Influence Code";
	label Young_Percent = "Percentage of US Citizens in Poverty, Ages 5-17";   
	label Young_Pov = "Number of US Citizens in Poverty, Ages 5-17";
	label sqml = "Square mileage";
	label FHWA_UR="FHWA Urban & Rural Classification";
	label Fips_code= "US Fips Code";
	label Year= "Year";
	label Per_Snow= "Perinnel Ice/Snow";
	label Dev_OS="Open Space Development";
	label Dev_Low="Low Development";
	label Dev_Med="Medium Development";
	label Dev_High="High Development";
	label Barr_Land="Barren Land";
	label Decid_For="Deciduous Forest";
	label Ever_For="Evergreen Forestation";
	label Mixed_For="Mixed Forest";
	label Shrub="Shrub Scrub";
	label Herb="Herbaceous";
	label Hay="Hay Pasture";
	label Cult_Crop="Cultivated Crops";
	label Wood_Wet="Woody Wetlands";
	label Herb_Wet="Emergent Herb Wetlands";
	label Pop="Population"; 
	label S140="Local Neighborhood Road";
	label S120="Secondary Road";
	label S110="Primary Road";
	label S163="Ramp";
	label S174="Private Raod for service vehicles";
	label S164="Serivce Drive";
	label S175="Internal US Census Bureau Use";
	label S150="Vehicular Trail";
	label S173="Alley";
	label S178="Parking Lot";
	label S171="Walkway/Pedestrian Trail";
	label Principal_Arterial = "Number of Principal Arterials: Interstate";
	label Principal_Arterial_NI = "Number of Principal Arterials: Non-Interstate";
	label Minor_Arterials = "Minor Arterials";
	label Local_Roads = "Local Roads";
	label Collectors = "Collectors";
;

Run;

Proc format;

value Census_fmt
0="Urbanized Areas"
1="Urban Clusters"
2="Rural";

value FHWA_fmt
0="Urbanized Areas"
1="Small Urbanized Areas"
2="Rural";

value OMB_fmt
0="Non-metro"
1="Metro";

value USDA_fmt
1="Metro: Counties in metro areas of 1 million population or more"
2="Metro: Counties in metro areas of 250,000 to 1 million population"
3="Metro: Counties in metro areas of fewer than 250,000 population"
4="Non-Metro: Urban population of 20,000 or more, adjacent to a metro area"
5="Non-Metro: Urban population of 20,000 or more, not adjacent to a metro area"
6="Non-Metro: Urban population of 2,500 to 19,999, adjacent to a metro area"
7="Non-Metro: Urban population of 2,500 to 19,999, not adjacent to a metro area"
8=" Non-Metro: Completely rural or less than 2,500 urban population, adjacent to a metro area"
9=" Non-Metro: Completely rural or less than 2,500 urban population, not adjacent to a metro area";

value USDA_Influ_fmt
1="Urban: Large metro area over 1 million population"
2="Urban: Small metro area less than 1 million population"
3="Rural: Micropolitan area adjacent to large metro area"
4="Rural: Noncore area adjacent to large metro area"
5="Rural: Micropolitan area adjacent to small metro area"
6="Rural: Noncore area adjacent to small metro area with town of at least 2,500 population"
7="Rural: Noncore area adjacent to small metro area with town of less than 2,500 population"
8="Rural: Micropolitan area not adjacent to metro area"
9="Rural: Noncore area adjacent to micro area with town of at least 2,500 population"
10="Rural: Noncore area adjacent to micro area with town of less than 2,500 population"
11="Rural: Noncore not adjacent to metro or micro area with town of 2,500 population"
12="Rural: Noncore not adjacent to metro or micro area with town of less than 2,500 population";

Run;

****

Aggregate variables by County, and SEPARATE years for time series
																	***
**********************************************************************
**************************************************************************
************************************************************************;

Proc Sort data=Convert_Fats;
	by fips_code YEAR;
Run;

Proc sort data=SES_Fatals;
	by fips_code YEAR;
Run;

Proc Summary Data=Convert_Fats;
	Var Traffic_Count ;
	by fips_code YEAR;
	output out=TrafFats_Data_YEAR  sum=Traffic_PER_YEAR; *Aggregate all traffic fatalities by county for all SIX Years;
Run;
Proc Sort data=TrafFats_Data_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=Convert_Fats;
	Var NMF_Count ;
	by fips_code YEAR;
	output out=NMF_Data_YEAR  sum=NMF_PER_YEAR; *Aggregate all traffic fatalities by county all SIX Years;
Run;
Proc Sort data=NMF_Data_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=Convert_Fats;
	Var Pop ;
	by fips_code YEAR;
	output out=Pop_Data_YEAR  sum=Pop_PER_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Pop_Data_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Pop ;
	by fips_code YEAR;
	output out=Population_YEAR  sum=Population_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Population_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=Convert_Fats;
	Var sqml ;
	by fips_code YEAR;
	output out=sqml_data_YEAR  sum=Sqml_PER_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=sqml_data_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var sqml ;
	by fips_code YEAR;
	output out=sqml_YEAR  median=sqml_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=sqml_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Median_HH_Income ;
	by fips_code YEAR;
	output out=HHIncome_YEAR  median=MedHH_Income_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=HHIncome_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Unemployment_Rate;
	by fips_code YEAR;
	output out=Unempl_YEAR  median=UnemployRate_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Unempl_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Pov_Percent;
	by fips_code YEAR;
	output out=Pov_YEAR  median=PoverPerc_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Pov_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Dev_OS ;
	by fips_code YEAR;
	output out=DevOS_YEAR  median=DevOS_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=DevOS_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Dev_Low ;
	by fips_code YEAR;
	output out=Dev_Low_YEAR  median=Dev_Low_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Dev_Low_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Dev_High ;
	by fips_code YEAR;
	output out=Dev_High_YEAR  median=Dev_High_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Dev_High_YEAR;
	by fips_code YEAR;
Run;
 

Proc Summary Data=SES_Fatals;
	Var Barr_Land ;
	by fips_code YEAR;
	output out=BarrLand_YEAR  median=BarrLand_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=BarrLand_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Decid_For ;
	by fips_code YEAR;
	output out=DecidFor_YEAR  median=DecidFor_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=DecidFor_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Ever_For ;
	by fips_code YEAR;
	output out=EverFor_YEAR  median=EverFor_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=EverFor_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Herb ;
	by fips_code YEAR;
	output out=Herb_YEAR  median=Herb_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Herb_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Hay ;
	by fips_code YEAR;
	output out=Hay_YEAR  median=Hay_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=Hay_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Cult_Crop ;
	by fips_code YEAR;
	output out=CultCrop_YEAR  median=CultCrop_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=CultCrop_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Wood_Wet ;
	by fips_code YEAR;
	output out=WoodWet_YEAR  median=WoodWet_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=WoodWet_YEAR;
	by fips_code YEAR;
Run;


Proc Summary Data=SES_Fatals;
	Var Child_Percent ;
	by fips_code YEAR;
	output out=ChildPov_YEAR  median=ChildPov_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=ChildPov_YEAR;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Intern_Migration;
	by fips_code YEAR;
	output out=InternMigration_YEAR  sum=InternMigration_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=InternMigration_YEAR ;
	by fips_code YEAR;
Run;

Proc Summary Data=SES_Fatals;
	Var Domestic_Migration ;
	by fips_code YEAR;
	output out=DomesticMigration_YEAR  sum=DomesticMigration_YEAR; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=DomesticMigration_YEAR;
	by fips_code YEAR;
Run;
*
*
*Include aggregated data for tiger transportation lines data;
Proc Summary Data=SES_Fatals;
	Var S140 ;
	by fips_code Year;
	output out=S140_Data  sum=LocalRoad_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S140_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S120 ;
	by fips_code Year;
	output out=S120_Data  sum=SecRoad_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S120_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S110 ;
	by fips_code Year;
	output out=S110_Data  sum=PrimRoad_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S110_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S163 ;
	by fips_code Year;
	output out=S163_Data  sum=Ramp_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S163_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S174 ;
	by fips_code Year;
	output out=S174_Data  sum=PrivRoad_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S174_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S164 ;
	by fips_code Year;
	output out=S164_Data  sum=ServDriver_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S164_Data;
	by fips_code Year;
Run;


Proc Summary Data=SES_Fatals;
	Var S175 ;
	by fips_code Year;
	output out=S175_Data  sum=CensusRoad_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S175_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S150 ;
	by fips_code Year;
	output out=S150_Data  sum=VehTrail_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S150_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S173 ;
	by fips_code Year;
	output out=S173_Data  sum=Ally_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S173_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S178 ;
	by fips_code Year;
	output out=S178_Data  sum=Parking_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S178_Data;
	by fips_code Year;
Run;

Proc Summary Data=SES_Fatals;
	Var S171 ;
	by fips_code Year;
	output out=S171_Data  sum=PedTrail_PerYear; *Aggregate all traffic fatalities by county and year;
Run;
Proc Sort data=S171_Data;
	by fips_code Year;
Run;



*
*
* Assessing Categories;

Data Categories_SESdata;
	set SES_Fatals;
	keep fips_code year Area_name CDC_Urban_Rural OMB_Metro USDA_Urban_Rural USDA_Urban_Inf
		Census_UR FHWA_UR;
Run;
Proc Sort data=Categories_SESdata;
	by fips_code YEAR;
Run;

*Merge together all datasets to combine all six years of data by county; 
Data PER_YEAR_Dataset;
	merge Categories_SESdata S171_Data S178_Data S173_Data S150_Data
			S175_Data S164_Data S174_Data S163_Data S110_Data S120_Data S140_Data 
			TrafFats_Data_YEAR NMF_Data_YEAR Pop_Data_YEAR
			Population_YEAR sqml_YEAR HHIncome_YEAR
			Unempl_YEAR Pov_YEAR DevOS_YEAR Dev_Low_YEAR Dev_High_YEAR 
			BarrLand_YEAR DecidFor_YEAR EverFor_YEAR Herb_YEAR Hay_YEAR CultCrop_YEAR WoodWet_YEAR
			ChildPov_YEAR InternMigration_YEAR DomesticMigration_YEAR 
;
	by fips_code YEAR;
Run;

Proc print data= PER_YEAR_Dataset(obs=2);
Run;

Proc contents data=PER_YEAR_Dataset;
Run;

***************************************
*How many total traffic deaths were there in all years combined, in top 10% and in all counties;
Proc freq data=PER_YEAR_Ranks;
	tables Traffic_sum;
	Where Traff_Rate_Rank in (1:300);
Run;

Proc print data=PER_YEAR_Ranks (obs=10);
	var State_Name County_Name Year Traffic_PER_YEAR Pop_per_year Traff_Rate Traff_Rate_Rank ;
	Where Traff_Rate_Rank in (1:10);
Run;

*
*
*
*
*
	C O N V E R T 		C O U N T S				T O 			 R A T E S	*********
*
*
*
*;
Data PER_YEAR_Dataset_2;
	set PER_YEAR_Dataset (drop=_TYPE_ _FREQ_ );

*SES variables;
	Pop_Dens=(Pop_PER_YEAR/sqml_YEAR);
	
	IntMigrat_Percent=(InternMigration_YEAR/Pop_PER_YEAR)*100;
	DomMigrat_Percent=(DomesticMigration_YEAR/Pop_PER_YEAR)*100;

*Fatality variables;
	Traff_Rate=(Traffic_PER_YEAR/Pop_PER_YEAR)*100000; *Per 100,000 persons;
	Traff_Pop_Dens=(Traffic_PER_YEAR/Pop_Dens);
	NMF_Rate=(NMF_PER_YEAR/Pop_PER_YEAR)*100000;
	Traff_PerCapita=(Traffic_PER_YEAR/Pop_PER_YEAR);


*Label variables;
	label Area_name = "US County (State)";
	label Fips_code = "Fips Code";
	label Urban_Rural_Category='Urban/Rural Group (CDC)';
	label USDA_Urban_Rural = "USDA/ERS Rural-urban Continuum Code, 2013";
	label USDA_Urban_Inf = "USDA/ERS Urban Influence Code";
	label Pop_PER_YEAR = "Population Count";
	label Pop_Dens = 'Population Density (persons per sqml)';
	label sqml_YEAR="Square Mileage of Land";

	label NMF_PER_YEAR="Number of Non-Motorist Lives Lost due to Traffic Crashes";
	label NMF_Rate='NMF Rate, by Population (100,000 persons)';
	label Traffic_PER_YEAR='Number of Lives Lost due to Traffic Crashes';
	label Traff_Pop_Dens='Traffic Fatality by Population Density';
	label Traff_Rate='Traffic Fatality Rate, by Population (100,000 persons)';
	label Traff_PerCapita='Traffic Fatality, per Capita';

	label MedHH_Income_YEAR = "Median Household Income (US$)";
	label UnemployRate_YEAR = "Unemployment Percentage";
	label PoverPerc_YEAR = "Poverty Percentage";
	label ChildPov_YEAR = "Children Poverty Percentage";
	label InternMigration_YEAR = "International Migration Counts";
	label DomesticMigration_YEAR= "Domestic Migration Counts";
	label IntMigrat_Percent = "International Migration Percentage";
	label DomMigrat_Percent = "Domestic Migration Percentage";
	label DevOS_YEAR = "Land Development, Open Space Development, Percentage";
	label Dev_Low_YEAR = "Land Development, Low Development Levels, Percentage";
	label Dev_High_YEAR = "Land Development, High Development Levels, Percentage";

	label BarrLand_YEAR = "Barren Land Percentage";
	label DecidFor_YEAR = "Deciduous Forest Percentage";
	label EverFor_YEAR = "Evergreen Forest Percentage";
	label Herb_YEAR = "Herbaceous Percentage";
	label Hay_YEAR = "Hay Pasture Percentage";
	label CultCrop_YEAR = "Cultivated Crops";
	label WoodWet_YEAR = "Woody Wetlands";

	label S140="Local Neighborhood Road Mileage";
	label S120="Secondary Road Mileage";
	label S110="Primary Road Mileage";
	label S163="Ramp Mileage";
	label S174="Private Raod for service vehicles Mileage";
	label S164="Serivce Drive Mileage";
	label S175="Internal US Census Bureau Use Mileage";
	label S150="Vehicular Trail Mileage";
	label S173="Alley Mileage";
	label S178="Parking Lot Mileage";
	label S171="Walkway/Pedestrian Trail Mileage";

	Drop Population_YEAR;

	If Year=2017 then delete;

Run;

PROC CONTENTS DATA=PER_YEAR_Dataset_2;
RUN;

PROC PRINT DATA=PER_YEAR_Dataset_2 (OBS=2);
RUN;

*Export integrated data set into raw data file, Years 2010-2017;
PROC EXPORT data=PER_YEAR_Dataset_2
outfile="C:\Users\Briana.Thrift.ctr\Desktop\PER_YEAR_Dataset_2.xlsx" 
dbms=xlsx
replace;
run;


******************************************************************************************
*******************************************************************************************
******************************************************************************************;


** AGGREGATE TRAFFIC FATALITIES BY COUNTY, OVER THE STUDY PERIOD (7 Years combined, not annually), AND RANK COUNTIES BY WORST RATES.;

Data State_Case_Studies; *NLCD and Tiger Lines Data derived from National Land Coverage Database and US Census Bureaur;
  	INFILE "C:\Users\Briana.Thrift.ctr\Desktop\PER_YEAR_Dataset_2.csv" dsd firstobs=2 truncover ;
	Length Area_name $54 CDC_Urban_Rural $54;
  	INPUT Area_name	State_Name$	CDC_Urban_Rural	FIPS_code	
			YEAR	USDA_Urban_Rural	USDA_Urban_Inf	OMB_Metro	
			Census_UR	FHWA_UR	PedTrail_PerYear	Parking_PerYear	Ally_PerYear	
			VehTrail_PerYear	CensusRoad_PerYear	ServDriver_PerYear	PrivRoad_PerYear
			Ramp_PerYear	PrimRoad_PerYear	SecRoad_PerYear	LocalRoad_PerYear	
			Traffic_PER_YEAR	NMF_PER_YEAR	Pop_PER_YEAR	sqml_YEAR	MedHH_Income_YEAR	
			UnemployRate_YEAR	PoverPerc_YEAR	DevOS_YEAR	BarrLand_YEAR	ChildPov_YEAR	
			InternMigration_YEAR	DomesticMigration_YEAR	Pop_Dens	IntMigrat_Percent	
			DomMigrat_Percent	Traff_Rate	Traff_Pop_Dens	NMF_Rate	Traff_PerCapita

		;
Run;

* Check that the data inputted correctly;

Proc print data=State_Case_Studies (obs=2);
run;

Proc contents data=State_Case_Studies;
run;

**** Aggregate by County, and summarize all 7 years together;

Proc Sort data=State_Case_Studies;
	by fips_code;
Run;

Proc Summary Data=State_Case_Studies;
	Var Traffic_PER_YEAR ;
	by fips_code;
	output out=Traff_Data2  sum=Traffic_Death_Sum; *Aggregate all traffic fatalities by county for all SIX Years;
Run;
proc sort data=Traff_Data2;
	by Fips_Code;
run;

Proc Summary Data=State_Case_Studies;
	Var Pop_PER_YEAR ;
	by fips_code;
	output out=Pop_Data2  sum=Pop_Sum; *Aggregate all traffic fatalities by county for all SIX Years;
Run;
proc sort data=Pop_data2;	
	by Fips_code;
Run;

Data Location;
	set State_Case_Studies;
	keep State_Name Area_Name FIPS_code CDC_Urban_Rural;
Run;
Proc Sort data=Location;
by fips_code;
Run;

*Merge together all datasets to combine all six years of data by county; 
Data SUM_Traffic_Dataset;
	merge Location Traff_Data2 Pop_data2;
	by fips_code;
Run;

*Convert Traffic Counts to Rates;
Data SUM_Traffic_Dataset2;
	set SUM_Traffic_Dataset;

	Traffic_Fatal_Rate=(Traffic_Death_Sum/Pop_Sum)*100000; *Per 100,000 persons;
Run;

Proc Print data=SUM_Traffic_Dataset2 (obs=10);
Run;

Proc Sort Data=SUM_Traffic_Dataset2
	Dupout=fileofduplicates_Ranks NoDupkey;
	By fips_code;
Run;

Proc Print data=SUM_Traffic_Dataset2 (obs=10);
Run;

***** Want to rank Traffic Fatality Rates for State-level Case Studies;

**___________________5 Pacific West States________________;

*Rank Rates in Washington, 39 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_WA_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="WA";
Run;
Proc Print data=TF_WA_Ranks;
	Where TF_Rank<=4;
Run;

*Rank Rates in Hawaii, 36 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_OR_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="OR";
Run;

Proc Print data=TF_OR_Ranks;
	Where TF_Rank<=4;
Run;

*Rank Rates in California, 58 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_California_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="CA";
Run;
Proc Print data=TF_California_Ranks;
	Where TF_Rank<=6;
Run;


**Mountains Western  States;

*Rank Rates in Montanna, 56 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_MT_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="MT";
Run;

Proc Print data=TF_MT_Ranks;
	Where TF_Rank<=6;
Run;

*Rank Rates in Colorado, 64 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_CO_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="CO";
Run;

Proc Print data=TF_CO_Ranks;
	Where TF_Rank<=6;
Run;

**** ___________________5 Midwestern States________________________

** West North Central

*Rank Rates in Minnesota, 87 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_MN_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="MN";
Run;

Proc Print data=TF_MN_Ranks;
	Where TF_Rank<=9;
Run;

*Rank Rates in Nebraska, 93 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_NE_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="NE";
Run;

Proc Print data=TF_NE_Ranks;
	Where TF_Rank<=9;
Run;

*Rank Rates in Kansas, 105 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_KS_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="KS";
Run;

Proc Print data=TF_KS_Ranks;
	Where TF_Rank<=10;
Run;

**East North Central;

*Rank Rates in Michigan, 83 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_MI_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="MI";
Run;

Proc Print data=TF_MI_Ranks;
	Where TF_Rank<=8;
Run;

*Rank Rates in Illinois, 102 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_IL_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="IL";
Run;

Proc Print data=TF_IL_Ranks;
	Where TF_Rank<=10;
Run;



** ________________5 South States_____________________;

*West South Central

*Rank Rates in Texas, 254 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_Texas_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="TX";
Run;

Proc Print data=TF_Texas_Ranks;
	Where TF_Rank<=25;
Run;

* East South Central;

*Rank Rates in Mississippi, 82 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_MS_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="MS";
Run;

Proc Print data=TF_MS_Ranks;
	Where TF_Rank<=8;
Run;

*Rank Rates in Tenessee, 95 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_TN_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="TN";
Run;

Proc Print data=TF_TN_Ranks;
	Where TF_Rank<=10;
Run;

*South Atlantic

*Rank Rates in Georgia, 159 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_GA_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="GA";
Run;

Proc Print data=TF_GA_Ranks;
	Where TF_Rank<=16;
Run;

*Rank Rates in Florida, 67 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_FL_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="FL";
Run;

Proc Print data=TF_FL_Ranks;
	Where TF_Rank<=7;
Run;


*** ______________Northeastern States_________________;

*Mid Atlantic States;

*Rank Rates in New York, 62 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_NY_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="NY";
Run;

Proc Print data=TF_NY_Ranks;
	Where TF_Rank<=6;
Run;

*Rank Rates in Pennsylvannia, 67 Counties;
Proc rank data=SUM_Traffic_Dataset2 out=TF_PA_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="PA";
Run;

Proc Print data=TF_PA_Ranks;
	Where TF_Rank<=7;
Run;
* New England States;

*Rank Rates in Maine, 14 Counties, 20% because of small sample size;
Proc rank data=SUM_Traffic_Dataset2 out=TF_MA_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="MA";
Run;

Proc Print data=TF_MA_Ranks;
	Where TF_Rank<=2;
Run;

*Rank Rates in New Hamphshire, 10 Counties, 20% because of small sample size;
Proc rank data=SUM_Traffic_Dataset2 out=TF_NH_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="NH";
Run;

Proc Print data=TF_NH_Ranks;
	Where TF_Rank<=2;
Run;

*Rank Rates in Vermont, 14 Counties, 20% due to small sample size;
Proc rank data=SUM_Traffic_Dataset2 out=TF_VT_Ranks descending ties=low;
   var Traffic_Fatal_Rate;
   ranks TF_Rank;
   Where State_Name="VT";
Run;

Proc Print data=TF_VT_Ranks;
	Where TF_Rank<=2;
Run;


*Subset of Datasets with the Top 10% or Top 20% of the Highest Traffic Fatality Rates
over the 7 years of data, (2010-2016). Want to assess descriptive stats for the Different States and Counties Fatal Rates over the Years;

Data State_Cases_Yearly;
	set State_Case_Studies;
	IF Fips_code in ( 53001 53023 53043 53059 41025 41031 41055 41069 6003
		6015 6027 6063 6091 6105 27001 27023 27043 27063 27075 27087 27107 27115
		27133 8017 8023 8073 8079 8111 8121 27001 27023 27043 27063 27075 27087
		27107 27115 27133 31005 31007 31031 31049 31087 31133 31149 31163 31171 20017
		20019 20053 20063 20073 20083 20165 20179 20195 20203 26003 26011 26027 26079
		26083 26095 26129 26165 17035 17049 17051 17059 17069 17075 17079 17085 17151 17189
		48011 48023 48033 48105 48109 48155 48173 48229 48235 48261 48267 48269 48283 48297
		48301 48311 4831 48359 48385 48389 48393 48433 48435 48443 48475 28015 28023 28029 28031
		28039 28055 28065 28143 47005 47013 47061 47075 47083 47115 47121 47135 47161 47169 13007
		13033 13061 13065 13099 13133 13155 13165 13211 13263 13265 13283 13289 13301 13307 13319
		12003 12043 12047 12063 12065 12075 12121 36025 36039 36041 36049 36099 36105 42009 42023
		42053 42057 42113 42115 42117 25003 25011 33003 33007 50009 50019 30003 30011 30045 30069
		30079	30103)

THEN County_TF_In_State="High";
else delete;
Run;

Proc Print data=State_Cases_Yearly (obs=10);
Run;

Proc format; 
Value USDA_fmt
1="Metro: Counties in metro areas of 1 million population or more"
2="Metro: Counties in metro areas of 250,000 to 1 million population"
3="Metro: Counties in metro areas of fewer than 250,000 population"
4="Non-Metro: Urban population of 20,000 or more, adjacent to a metro area"
5="Non-Metro: Urban population of 20,000 or more, not adjacent to a metro area"
6="Non-Metro: Urban population of 2,500 to 19,999, adjacent to a metro area"
7="Non-Metro: Urban population of 2,500 to 19,999, not adjacent to a metro area"
8=" Non-Metro: Completely rural or less than 2,500 urban population, adjacent to a metro area"
9=" Non-Metro: Completely rural or less than 2,500 urban population, not adjacent to a metro area";
Run;

** Summary Stats per State;

Proc sort data=State_Cases_Yearly;
	By State_Name;
Run;

Proc freq data=State_Cases_Yearly;
	tables State_Name;
Run;

Proc sort data=State_Cases_Yearly;
	By Year;
Run;

Proc Means mean median data=State_Cases_Yearly;
	var Traffic_PER_YEAR Pop_PER_YEAR Traff_Rate
		PoverPerc_YEAR IntMigrat_Percent DevOS_YEAR;
	Where State_Name="GA";
Run;

Proc Means mean median data=State_Cases_Yearly;
	var PoverPerc_YEAR;
	Where State_Name="GA";
Run;

Proc Means mean median data=State_Cases_Yearly;
	var Traffic_PER_YEAR Pop_PER_YEAR Traff_Rate
		PoverPerc_YEAR IntMigrat_Percent DevOS_YEAR;
	Where State_Name="NY";
Run;


Proc Freq data=State_Cases_Yearly;
	tables USDA_Urban_Rural;
	format USDA_Urban_Rural USDA_fmt.;

	Where State_Name="GA";
Run;

*** Looking at FARS Descriptive Stats, so we need to pull variables from that dataset, with these specific Counties and states;

Data State_Cases_FARS_Dataset;
	set FARS_Fipscodes;
	IF Fips_code in ( 53001 53023 53043 53059 41025 41031 41055 41069 6003
		6015 6027 6063 6091 6105 27001 27023 27043 27063 27075 27087 27107 27115
		27133 8017 8023 8073 8079 8111 8121 27001 27023 27043 27063 27075 27087
		27107 27115 27133 31005 31007 31031 31049 31087 31133 31149 31163 31171 20017
		20019 20053 20063 20073 20083 20165 20179 20195 20203 26003 26011 26027 26079
		26083 26095 26129 26165 17035 17049 17051 17059 17069 17075 17079 17085 17151 17189
		48011 48023 48033 48105 48109 48155 48173 48229 48235 48261 48267 48269 48283 48297
		48301 48311 4831 48359 48385 48389 48393 48433 48435 48443 48475 28015 28023 28029 28031
		28039 28055 28065 28143 47005 47013 47061 47075 47083 47115 47121 47135 47161 47169 13007
		13033 13061 13065 13099 13133 13155 13165 13211 13263 13265 13283 13289 13301 13307 13319
		12003 12043 12047 12063 12065 12075 12121 36025 36039 36041 36049 36099 36105 42009 42023
		42053 42057 42113 42115 42117 25003 25011 33003 33007 50009 50019 30003 30011 30045 30069
		30079	30103)

THEN County_TF_In_State="High";
else delete;
Run;


Proc print data=State_Cases_FARS_Dataset (obs=2);
Run;

Proc Contents data=State_Cases_FARS_Dataset;
Run;

** FARS Descriptive Var;
Proc freq data=State_Cases_FARS_Dataset;
	tables Census_UR Func_System;
	format Census_UR Census_UR_fmt. Func_System Func_fmt.;

	Where State_Name="California";
Run;

Proc freq data=State_Cases_FARS_Dataset;
	tables Census_UR Func_System;
	format Census_UR Census_UR_fmt. Func_System Func_fmt.;

	Where State_Name="Georgia";
Run;
	

Proc freq data=State_Cases_FARS_Dataset;
	tables Census_UR Func_System;
	format Census_UR Census_UR_fmt. Func_System Func_fmt.;

	Where State_Name="Kansas";
Run;

Proc freq data=State_Cases_FARS_Dataset;
	tables Census_UR Func_System;
	format Census_UR Census_UR_fmt. Func_System Func_fmt.;

	Where State_Name="New York";
Run;


*___________________________________ STATE CASE STUDY ANALYSIS COMPLETED___________________________*;

****************** DESCRIPTIVES ON TIME SERIES ****************;

Proc sort data=PER_YEAR_Dataset_2;
	by year;
Run;

Proc freq data=PER_YEAR_Dataset_2;
	tables year;
Run;

Proc means mean std median data=PER_YEAR_Dataset_2;
	var Traffic_PER_YEAR Traff_Rate Traff_PerCapita NMF_PER_YEAR NMF_Rate;
	Title 'Traffic Fatalities across all US Counties, (2010-2016)';
Run;

Proc means mean std median data=PER_YEAR_Dataset_2;
	var Pop_PER_YEAR sqml_YEAR Pop_Dens MedHH_Income_YEAR UnemployRate_YEAR PoverPerc_YEAR 
		ChildPov_YEAR  IntMigrat_Percent DomMigrat_Percent;
Run;

Proc means mean std median data=PER_YEAR_Dataset_2;
	var DevOS_YEAR Dev_Low_YEAR Dev_High_YEAR 
		BarrLand_YEAR DecidFor_YEAR EverFor_YEAR 
		Herb_YEAR Hay_YEAR CultCrop_YEAR WoodWet_YEAR;
Run;

Proc means mean std median data=PER_YEAR_Dataset_2;
	var PrimRoad_PerYear SecRoad_PerYear 
		LocalRoad_PerYear PedTrail_PerYear Ally_PerYear Parking_PerYear  
		VehTrail_PerYear CensusRoad_PerYear ServDriver_PerYear 
		PrivRoad_PerYear Ramp_PerYear  ;
Run;

Proc FREQ DATA=PER_YEAR_Dataset_2;
	TABLES CDC_Urban_Rural Census_UR FHWA_UR 
			OMB_Metro USDA_Urban_Rural USDA_Urban_Inf;
	FORMAT Census_UR Census_fmt. FHWA_UR FHWA_fmt. OMB_Metro OMB_fmt. 
	USDA_Urban_Rural USDA_fmt. USDA_Urban_Inf USDA_Influ_fmt.;
Run;


proc univariate data=PER_YEAR_Dataset_2;
WHERE Traff_Rate between 0 and 400;
var Traff_Rate;
histogram / endpoints = 0 to 400 by 10;
run;


***************************************************************************************
*
*
*
*
* Assess Population Aggregated Data for the Top Percentage Tiers****;

	*Sub Analysis of Top 30% Tier;

DATA Top30_TierAnalysis; 
	SET PER_YEAR_Dataset_2;

	IF Fips_code in (48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
48087
40099
30009
29185
40055
51183
1019
40033
46007
31163
48217
21031
1105
29087
31173
22037
48237
28091
40015
31113
28021
31101
17189
48263
28107
13155
48239
48045
31069
21105
1021
48129
37047
56003
13033
29139
30091
19195
29203
40067
29221
48411
31139
29143
40049
12003
5015
31103
48009
22021
29197
30097
40073
16029
48455
45033
28041
4005
48387
48357
30001
48403
48051
30083
28079
48333
46137
48247
47005
48343
48159
13133
12121
21099
6015
1013
46073
21077
29129
48165
16047
48335
48193
39163
48399
53001
40089
53043
21041
32033
13211
48275
21169
8071
55007
21193
18073
30037
45023
48417
20087
20101
1091
28097
1053
28063
45075
40035
46053
16053
28009
20147
16071
51037
6063
45089
48107
40091
28005
1029
47013
28125
48407
35051
12063
28161
19133
46037
42057
40081
40023
17075
29045
16059
5113
28141
8019
41031
55041
47115
41037
47083
5141
48225
37155
5075
12079
48401
20135
22013
48373
29073
30007
17151
13061
40097
47161
54047
48111
37017
54093
30105
47077
29173
40003
5137
19071
53023
20049
32027
29223
56045
48315
47109
29103
48457
13307
47039
22077
16079
5087
20077
13065
48013
12029
4017
22007
8057
1127
37015
37073
49023
5149
28099
31027
12059
1025
17035
48285
49033
21007
20145
19073
6027
5029
21203
28057
22121
28043
13189
40095
20139
21011
48125
17079
13321
16039
5097
21223
48413
20207
20043
49001
1023
6011
21143
38039
1113
30099
40051
46033
21187
19129
48363
46119
47175
31105
47055
28085
35039
38055
13191
5105
22111
5021
32013
13141
13087
48163
20163
5025
5081
39067
48467
40057
30053
29093
40087
13207
40151
4011
38037
16061
41021
47139
5041
51127
20127
28139
47159
48067
13163
31009
21195
8125
31161
8093
28137
18025
48307
38091
22025
21055
19003
47057
42113
55051
48101
28119
40111
17059
19009
21157
48179
21155
45005
54023
20029
13287
38029
48295
13011
56013
22085
1079
46057
12023
48019
29119
17085
46129
28123
21219
48135
40009
20159
48053
27133
29153
48077
22029
5089
21153
21119
28113
28007
28101
48079
17051
51097
12107
31099
46081
1007
49013
20089
27115
45067
21181
31017
20199
28061
51033
48279
48093
29215
51135
21231
31073
16031
16035
12049
28117
1065
38075
47085
21085
51163
28013
51007
40153
51175
48319
27063
21053
45061
56023
48293
20115
21129
13107
20191
12131
51081
53059
6049
1133
40041
40115
45059
21033
19085
30021
28127
48501
38079
29181
37163
28115
40133
40013
12067
13085
13003
20081
54109
18181
18169
29227
51197
31121
48203
13043
1107
18125
30109
54027
42115
48341
28111
31181
19011
20031
20193
20075
1071
55013
20003
12037
45009
27023
8081
21221
29209
48145
31035
5053
48445
30107
21087
18061
13093
1017
12051
48143
40117
22059
48191
41001
51029
5023
31047
1041
12087
21071
48233
17049
54085
40019
5035
29025
42053
20167
26083
55137
21229
6043
16025
22093
29015
13025
13229
31003
21027
8027
13201
1099
54005
28011
48497
47043
8051
13105
5061
21009
30027
48291
22123
29149
42023
55037
12133
13083
45031
6021
8113
45065
32023
31123
5135
1129
12123
38009
51001
5111
28157
20021
54035
47133
17157
1111
13171
19007
31185
12039
21235
48021
5049
29085
6035
38093
51021
47111
27107
17023
37185
38019
40107
13175
20109
48253
20085
19159
18171
5039
21183
35025
48115
48347
51091
42009
29157
21023
29141
45069
37123
28045
22053
28037
48055
6093
54059
13027
48073
21123
55057
21121
53051
38095
19115
1121
21057
42117
47103
20201
45011
6051
16009
13109
37141
47185
5067
8091
21213
47107
13075
48477
31041
42067
40077
28027
51017
51125
20123
51089
28135
46047
48249
13197
28109
47071
51035
28147
8003
29003
18147
5047
21001
13199
29065
30095
20013
18051
13161
29163
40061
54031
29186
42099
29137
38003
48147
37127
48481
47059
48227
13119
30065
13149
48103
29207
48499
22097
28067
24023
38027
51117
55077
37131
51057
40039
18111
46111
13193
5077
26003
48097
28151
21075
30019
 ) then Top30_Tier="Yes";
		ELSE Delete;
Run;

*Descriptive Analysis on Top 30% tier -- aggregated demographic summary data;
Proc sort data=Top30_TierAnalysis;
	by year;
Run;

Proc means mean std median data = Top30_TierAnalysis;
	var Traffic_PER_YEAR Traff_Rate Traff_PerCapita NMF_PER_YEAR NMF_Rate;
	Title 'Traffic Fatalities across Top 30% Tier of Highest Traffic Fatality Rates, (2010-2016)';
Run;

Proc means mean std median data = Top30_TierAnalysis;
	var Pop_PER_YEAR sqml_YEAR Pop_Dens MedHH_Income_YEAR UnemployRate_YEAR PoverPerc_YEAR 
		ChildPov_YEAR  IntMigrat_Percent DomMigrat_Percent;
Run;

Proc means mean std median data = Top30_TierAnalysis;
	var DevOS_YEAR Dev_Low_YEAR Dev_High_YEAR 
		BarrLand_YEAR DecidFor_YEAR EverFor_YEAR 
		Herb_YEAR Hay_YEAR CultCrop_YEAR WoodWet_YEAR;
Run;

Proc means mean std median data = Top30_TierAnalysis;
	var PrimRoad_PerYear SecRoad_PerYear 
		LocalRoad_PerYear PedTrail_PerYear Ally_PerYear Parking_PerYear  
		VehTrail_PerYear CensusRoad_PerYear ServDriver_PerYear 
		PrivRoad_PerYear Ramp_PerYear  ;
Run;

Proc FREQ DATA = Top30_TierAnalysis;
	TABLES CDC_Urban_Rural Census_UR FHWA_UR 
			OMB_Metro USDA_Urban_Rural USDA_Urban_Inf;
	FORMAT Census_UR Census_fmt. FHWA_UR FHWA_fmt. OMB_Metro OMB_fmt. 
	USDA_Urban_Rural USDA_fmt. USDA_Urban_Inf USDA_Influ_fmt.;
Run;

proc univariate data=Top30_TierAnalysis;
WHERE Traff_Rate between 0 and 400;
var Traff_Rate;
histogram / endpoints = 0 to 400 by 10;
run;

***;

DATA Top20_TierAnalysis; 
	SET PER_YEAR_Dataset_2;

	IF Fips_code in
(48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
48087
40099
30009
29185
40055
51183
1019
40033
46007
31163
48217
21031
1105
29087
31173
22037
48237
28091
40015
31113
28021
31101
17189
48263
28107
13155
48239
48045
31069
21105
1021
48129
37047
56003
13033
29139
30091
19195
29203
40067
29221
48411
31139
29143
40049
12003
5015
31103
48009
22021
29197
30097
40073
16029
48455
45033
28041
4005
48387
48357
30001
48403
48051
30083
28079
48333
46137
48247
47005
48343
48159
13133
12121
21099
6015
1013
46073
21077
29129
48165
16047
48335
48193
39163
48399
53001
40089
53043
21041
32033
13211
48275
21169
8071
55007
21193
18073
30037
45023
48417
20087
20101
1091
28097
1053
28063
45075
40035
46053
16053
28009
20147
16071
51037
6063
45089
48107
40091
28005
1029
47013
28125
48407
35051
12063
28161
19133
46037
42057
40081
40023
17075
29045
16059
5113
28141
8019
41031
55041
47115
41037
47083
5141
48225
37155
5075
12079
48401
20135
22013
48373
29073
30007
17151
13061
40097
47161
54047
48111
37017
54093
30105
47077
29173
40003
5137
19071
53023
20049
32027
29223
56045
48315
47109
29103
48457
13307
47039
22077
16079
5087
20077
13065
48013
12029
4017
22007
8057
1127
37015
37073
49023
5149
28099
31027
12059
1025
17035
48285
49033
21007
20145
19073
6027
5029
21203
28057
22121
28043
13189
40095
20139
21011
48125
17079
13321
16039
5097
21223
48413
20207
20043
49001
1023
6011
21143
38039
1113
30099
40051
46033
21187
19129
48363
46119
47175
31105
47055
28085
35039
38055
13191
5105
22111
5021
32013
13141
13087
48163
20163
5025
5081
39067
48467
40057
30053
29093
40087
13207
40151
4011
38037
16061
41021
47139
5041
51127
20127
28139
47159
48067
13163
31009
21195
8125
31161
8093
28137
18025
48307
38091
22025
21055
19003
47057
42113
55051
48101
28119
40111
17059
19009
21157
48179
21155
45005
54023
20029
13287
38029
48295
13011
56013
22085
1079
46057
12023
48019
29119
17085
46129
28123
21219
48135
40009) then Top20_Tier="Yes";
		ELSE Delete;
Run;

*Descriptive Analysis on Top 20% tier -- aggregated demographic summary data;
Proc sort data=Top20_TierAnalysis;
	by year;
Run;

Proc means mean std median data = Top20_TierAnalysis;
	var Traffic_PER_YEAR Traff_Rate Traff_PerCapita NMF_PER_YEAR NMF_Rate;
	Title 'Traffic Fatalities across Top 20% Tier Highest Traffic Fatality Rates, (2010-2016)';
Run;

Proc means mean std median data = Top20_TierAnalysis;
	var Pop_PER_YEAR sqml_YEAR Pop_Dens MedHH_Income_YEAR UnemployRate_YEAR PoverPerc_YEAR 
		ChildPov_YEAR  IntMigrat_Percent DomMigrat_Percent;
Run;

Proc means mean std median data = Top20_TierAnalysis;
	var DevOS_YEAR Dev_Low_YEAR Dev_High_YEAR 
		BarrLand_YEAR DecidFor_YEAR EverFor_YEAR 
		Herb_YEAR Hay_YEAR CultCrop_YEAR WoodWet_YEAR;
Run;

Proc means mean std median data = Top20_TierAnalysis;
	var PrimRoad_PerYear SecRoad_PerYear 
		LocalRoad_PerYear PedTrail_PerYear Ally_PerYear Parking_PerYear  
		VehTrail_PerYear CensusRoad_PerYear ServDriver_PerYear 
		PrivRoad_PerYear Ramp_PerYear  ;
Run;

Proc FREQ DATA = Top20_TierAnalysis;
	TABLES CDC_Urban_Rural Census_UR FHWA_UR 
			OMB_Metro USDA_Urban_Rural USDA_Urban_Inf;
	FORMAT Census_UR Census_fmt. FHWA_UR FHWA_fmt. OMB_Metro OMB_fmt. 
	USDA_Urban_Rural USDA_fmt. USDA_Urban_Inf USDA_Influ_fmt.;
Run;

proc means median min max data=Top20_TierAnalysis;
	var Traff_Rate;
Run;

proc univariate data=Top20_TierAnalysis;
WHERE Traff_Rate between 0 and 400;
var Traff_Rate;
histogram / endpoints = 0 to 400 by 10;
run;
***;


	** Top 10% Bracket**;
DATA Top10_TierAnalysis; 
	SET PER_YEAR_Dataset_2;

	IF Fips_code in (48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
 ) then Top10_Tier="Yes";
		ELSE Delete;
Run;

*Descriptive Analysis on Top 10% tier -- aggregated demographic summary data;
Proc sort data=Top10_TierAnalysis;
	by year;
Run;

Proc means mean std median data = Top10_TierAnalysis;
	var Traffic_PER_YEAR Traff_Rate Traff_PerCapita NMF_PER_YEAR NMF_Rate;
	Title 'Traffic Fatalities across Top 10% Bracket, (2010-2016)';
Run;

Proc means mean std median data = Top10_TierAnalysis;
	var Pop_PER_YEAR sqml_YEAR Pop_Dens MedHH_Income_YEAR UnemployRate_YEAR PoverPerc_YEAR 
		ChildPov_YEAR  IntMigrat_Percent DomMigrat_Percent;
Run;

Proc means mean std median data = Top10_TierAnalysis;
	var DevOS_YEAR Dev_Low_YEAR Dev_High_YEAR BarrLand_YEAR 
		DecidFor_YEAR EverFor_YEAR Herb_YEAR Hay_YEAR CultCrop_YEAR 
		WoodWet_YEAR 
;
Run;

Proc means mean std median data = Top10_TierAnalysis;
	var PrimRoad_PerYear SecRoad_PerYear 
		LocalRoad_PerYear PedTrail_PerYear Ally_PerYear Parking_PerYear  
		VehTrail_PerYear CensusRoad_PerYear ServDriver_PerYear 
		PrivRoad_PerYear Ramp_PerYear  ;
Run;

Proc FREQ DATA = Top10_TierAnalysis;
	TABLES CDC_Urban_Rural Census_UR FHWA_UR 
			OMB_Metro USDA_Urban_Rural USDA_Urban_Inf;
	FORMAT Census_UR Census_fmt. FHWA_UR FHWA_fmt. OMB_Metro OMB_fmt. 
	USDA_Urban_Rural USDA_fmt. USDA_Urban_Inf USDA_Influ_fmt.;
Run;

proc univariate data=Top10_TierAnalysis;
WHERE Traff_Rate between 0 and 400;
var Traff_Rate;
histogram / endpoints = 0 to 400 by 10;
run;

Proc sort data=Top10_TierAnalysis;
	by year;
Run;
proc means mean median data=Top10_TierAnalysis;
	var Traff_Rate;
by Year;
run;
*
*
*
*
* * * * B I V A R I A T E 		M O D E L I N G 		T O 	A S S E S S 	A S S O C I A T I O N ***
*
*
*
* ;

Proc Reg Data=Agg_Data_SixYear;
	model Traffic_CountySum_SixYears= Employ_CountySum_SixYears;
	Run;


*Assessing correlation for rates;
Proc Reg Data=Agg_Data_SixYear;
	model Traff_PerCapita= Income_Avg;
	Run;

* Want to count the traffic fatality counts data;
proc freq data=PER_YEAR_Dataset_2;

   tables Traffic_PER_YEAR / missing list out=counts (drop=percent rename=(count=Count_of_Traffic_Deaths));

run;

data TF_Counts_Data;

set counts;

Traffic_Counts = Traffic_PER_YEAR;

run;

proc print data=TF_Counts_Data (obs=10);
run;

*
*
*
*
*
*
***** R A N K 			C O U N T I E S 		B Y 		T O P 		10 %	*****
*
*
*
*
*
*
* Rank;
Proc rank data=Agg_Data_SixYear out=Aggregated_Ranks descending ties=low;
   var Traff_Rate Traff_Pop_Dens;
   ranks Traff_Rate_Rank Traff_Pop_Dens_Rank;
run;

Proc rank data=PER_YEAR_Dataset_2 out=PER_YEAR_Ranks descending ties=low;
   var Traff_Rate Traff_Pop_Dens;
   ranks Traff_Rate_Rank Traff_Pop_Dens_Rank;
run;

proc contents data=PER_YEAR_Ranks;
run;

proc contents data=Aggregated_Ranks;
run;

*Export integrated data set into raw data file, Years 2010-2017;
PROC EXPORT data=PER_YEAR_Ranks
outfile="C:\Users\Briana.Thrift.ctr\Desktop\PER_YEAR_Ranks.xlsx" 
dbms=xlsx
replace;
run;


*SUMMARY STATS;

***************************************
*How many total traffic deaths were there in all years combined, in top 10% and in all counties;
Proc means min max data=Aggregated_Ranks;
	var Traffic_CountySum_SixYears;
Run;

Proc print data=Aggregated_Ranks (obs=10);
	var State_Name County_Name Traffic_CountySum_SixYears Pop_CountySum_SixYears Traff_Rate Traff_Rate_Rank ;
	Where Traff_Rate_Rank in (1:10);
Run;

*********************************8
******************************8;

** Means median, std over all total years;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
run;





** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
run;

**Top 10% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:315);
run;

** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
	Where Traff_Rate_Rank in (1:315);
run;

proc univariate data=Aggregated_Ranks;
WHERE Traff_Rate between 0 and 150;
var Traff_Rate;
Where Traff_Rate_Rank in (1:315);
histogram / endpoints = 0 to 150 by 20;
run;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:315);
run;

*Top 30% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:945);
run;

** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
	Where Traff_Rate_Rank in (1:945);
run;

proc univariate data=Aggregated_Ranks;
WHERE Traff_Rate between 0 and 500;
var Traff_Rate;
Where Traff_Rate_Rank in (1:945);
histogram / endpoints = 0 to 500 by 20;
run;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:945);
run;

Proc contents data=Aggregated_Ranks;
run;

*Top 50% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:1575);
run;

		** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traff_PerCapita Traffic_CountySum_SixYears;
	Where Traff_Rate_Rank in (1:1575);
run;

proc univariate data=Aggregated_Ranks;
WHERE Traff_Rate between 0 and 1010;
var Traff_Rate;
Where Traff_Rate_Rank in (1:1575);
histogram / endpoints = 0 to 1010 by 20;
run;

	*Assessing CDC Urban/Rural Medians;
Proc means mean median data=Aggregated_Ranks;
	var Traff_Rate;
	by Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:1575);
run;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:1575);
run;

*Mean of traffic fatality rates in top 10%;
Proc Sort data=PER_YEAR_Ranks;
	by year;
Run;
Proc means mean median std min max data=PER_YEAR_Ranks;
	var Traff_Rate;
	by year;
run;


*Add in traffic counts for analysis;

Proc freq data=PER_YEAR_Ranks;
	tables Traff_Rate_Rank;
	Where Traff_Rate_Rank in (1:300);
Run;

Proc print data=PER_YEAR_Ranks (obs=10);
	var State_Name County_Name Year Traffic_PER_YEAR Pop_per_year Traff_Rate Traff_Rate_Rank ;
	Where Traff_Rate_Rank in (1:10);
Run;

Proc means min max data=PER_YEAR_Ranks;
var Traffic_PER_YEAR;
Where Traff_Rate_Rank in (1:300);
run;


Proc Print data=PER_YEAR_Ranks;
var Year County_Name State_Name;
Where Pop_Per_Year =20608;
Run;

*Visualize averages;
proc sgplot data=PER_YEAR_Ranks;
	VBox Traff_Rate/category=Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:300);
	Title "Average Traffic Fatality Rates among Top 10%";
Run;


*Average mean;
Proc means min max data=PER_YEAR_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:300);
run;

*Average population;
Proc means mean median std min max data=PER_YEAR_Ranks;
	var Pop_PER_YEAR;
run;

Proc print data=PER_YEAR_Ranks;
var State_name County_name year;
where Pop_PER_YEAR=10120540.00;
run;

Proc sort data=PER_YEAR_Ranks;
by year;
run;

Proc means mean median std min max data=PER_YEAR_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:300);
	by Year;
run;

Proc means mean median std min max data=PER_YEAR_Ranks;
	var Pop_PER_YEAR;
	Where Traff_Rate_Rank in (1:300);
	by Year;
run;

Proc means mean median std min max data=PER_YEAR_Ranks;
	var Pop_PER_YEAR;
	by Year;
run;

*Top 10% of Counties with high Traffic Fatality Counts;

Proc Print data=PER_YEAR_Ranks;
var Fips_code State_name County_name Traff_Rate_Rank;
where Traff_Rate_Rank in (1:315);
Run;

Proc contents data=Aggregated_Ranks;
run;

Proc freq data=PER_YEAR_Ranks;
tables Traffic_PER_YEAR;
where Traff_Rate_Rank in (1:300);
Run;

proc means mean min max data=PER_YEAR_Ranks;
var Traffic_PER_YEAR;
where Traff_Rate_Rank in (1:300);
run;


*Export integrated data set into raw data file, Years 2010-2017;
PROC EXPORT data=Aggregated_Ranks
outfile="C:\Users\Briana.Thrift.ctr\Desktop\Aggregated_Ranks.xlsx" 
dbms=xlsx
replace;
run;
/*Use the same path as above, adding a forward slash and the name of
your file.csv ( /ExampleCSV.csv )*/

*
*
*
*
*
******	 D E S C R I P T I V E 			S T A T I S T I C 		F O R 		T O P 		10 %	******
*
*
*
*
*

*Use FARS code to identify county names in original FARS dataset, for years 2010-2016
	Subset the FARS data with Top 10% of Traffic Fatality Counties;

Data High_TFRates_Data;
	set FARS_Fats_3;
	Where fips_code in (1011 
1035
1037
1063
1085
1087
1119
1131
4001
4012
5013
5017
5057
5059
5073
5095
5099
5117
5129
5147
6003
6091
6105
8009
8017
8023
8033
8053
8055
8061
8063
8073
8079
8109
8111
8115
8121
12043
12047
12075
13007
13099
13165
13263
13265
13283
13289
13301
13319
16003
16015
16033
16037
16049
16063
16077
19001
19029
20017
20019
20053
20063
20069
20071
20073
20083
20093
20097
20119
20129
20143
20151
20165
20179
20181
20183
20185
20189
20195
20197
20203
21025
21039
21051
21189
21197
21237
22047
22065
22081
22091
28015
28023
28029
28031
28039
28051
28055
28065
28093
28143
29035
29131
29155
29179
30003
30005
30011
30015
30033
30035
30039
30043
30045
30055
30057
30059
30061
30069
30073
30075
30077
30079
30087
30089
30103
31005
31007
31031
31049
31087
31133
31149
31171
32009
32011
32015
32017
32021
35003
35006
35007
35011
35019
35021
35023
35031
35033
35037
35053
35057
35059
37075
38005
38007
38013
38023
38025
38043
38049
38053
38061
38063
38069
38085
38087
38105
40007
40011
40025
40043
40045
40053
40059
40075
40085
40093
40103
40105
40127
40129
40149
41025
41055
41069
45017
45027
45029
45039
45053
46003
46021
46031
46045
46061
46063
46069
46071
46075
46085
46095
46097
46101
47061
47075
47121
47135
47169
48003
48011
48023
48031
48033
48047
48059
48065
48081
48083
48089
48105
48109
48119
48127
48131
48133
48137
48149
48151
48155
48161
48173
48175
48177
48185
48197
48205
48207
48211
48229
48235
48243
48255
48261
48267
48269
48271
48283
48287
48289
48297
48301
48305
48311
48313
48317
48327
48353
48359
48365
48371
48383
48385
48389
48391
48393
48395
48405
48419
48421
48425
48431
48433
48435
48443
48461
48475
48483
48487
48495
49009
49015
49017
49019
49025
49027
49037
49055
51025
51036
54007
54041
54071
55078
56007
56009
56011
56017
56019
56027
56031 );
Run;

Proc Sort Data=High_TFRates_Data
	Dupout=fileofduplicates_Ranks NoDupkey;
	By fips_code;
Run;

Proc Print Data=High_TFRates_Data;
var FARS_code State Fips_code;
Run;


** Now we want to take the FARS information (county number and state number) to subset FARS dataset;
Data High_TFRanks_Subset;
	set Traffic_Fats;
IF	County in (	11	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	1	) AND State in (	4	) then Top10=_n_;	
ELSE	IF	County in (	12	) AND State in (	4	) then Top10=_n_;	
ELSE	IF	County in (	13	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	95	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	99	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	117	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	147	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	91	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	79	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	109	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	111	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	115	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	121	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	99	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	165	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	263	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	265	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	283	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	289	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	301	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	319	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	77	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	1	) AND State in (	19	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	19	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	83	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	97	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	143	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	151	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	165	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	179	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	181	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	183	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	185	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	189	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	195	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	203	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	51	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	189	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	237	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	81	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	91	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	51	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	143	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	155	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	179	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	77	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	79	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	89	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	103	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	133	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	171	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	6	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	37	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	13	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	103	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	127	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	95	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	97	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	101	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	121	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	135	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	169	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	81	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	83	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	89	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	109	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	127	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	133	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	137	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	151	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	155	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	161	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	173	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	175	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	177	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	185	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	205	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	207	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	211	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	229	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	235	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	243	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	255	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	261	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	267	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	269	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	271	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	283	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	287	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	289	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	297	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	301	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	305	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	311	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	313	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	317	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	327	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	353	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	359	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	365	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	371	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	383	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	385	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	389	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	391	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	393	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	395	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	405	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	419	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	421	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	425	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	431	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	433	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	435	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	443	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	461	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	475	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	483	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	487	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	495	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	51	) then Top10=_n_;	
ELSE	IF	County in (	36	) AND State in (	51	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	41	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	78	) AND State in (	55	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	56	) then Top10=_n_;	
	
 else delete;

If YEAR=2017 then delete;

Run;

******* DESCRIPTIVE STATS********************************************************;
Proc print data=High_TFRanks_Subset;
run;

PROC EXPORT data=High_TFRanks_Subset
outfile="C:\Users\Briana.Thrift.ctr\Desktop\High_TFRanks_Subset.xlsx" 
dbms=xlsx
replace;
run;



* Identify Top 10% bracket of US Counties (n=315)with highest traffic fatality rates;
Data High_Top10Rates_Bracket;
	set FARS_Fats_3;
	Where fips_code in 
(48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069);
Run;

Proc Sort Data=High_Top10Rates_Bracket
	Dupout=fileofduplicates_Ranks NoDupkey;
	By fips_code;
Run;

Proc Print Data=High_Top10Rates_Bracket;
var FARS_code State Fips_code;
Run;


** Now we want to take the FARS information (county number and state number) to subset FARS dataset;
Data High_TFRanks_Subset;
	set Traffic_Fats;
IF	County in (	11	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	1	) then Top10=_n_;	
ELSE	IF	County in (	1	) AND State in (	4	) then Top10=_n_;	
ELSE	IF	County in (	12	) AND State in (	4	) then Top10=_n_;	
ELSE	IF	County in (	13	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	95	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	99	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	117	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	147	) AND State in (	5	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	91	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	6	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	79	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	109	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	111	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	115	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	121	) AND State in (	8	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	12	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	99	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	165	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	263	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	265	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	283	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	289	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	301	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	319	) AND State in (	13	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	77	) AND State in (	16	) then Top10=_n_;	
ELSE	IF	County in (	1	) AND State in (	19	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	19	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	83	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	97	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	143	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	151	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	165	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	179	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	181	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	183	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	185	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	189	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	195	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	203	) AND State in (	20	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	51	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	189	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	237	) AND State in (	21	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	81	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	91	) AND State in (	22	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	51	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	143	) AND State in (	28	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	155	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	179	) AND State in (	29	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	35	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	73	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	77	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	79	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	89	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	103	) AND State in (	30	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	133	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	171	) AND State in (	31	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	32	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	6	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	57	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	35	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	37	) then Top10=_n_;	
ELSE	IF	County in (	5	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	13	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	49	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	87	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	38	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	43	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	93	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	103	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	127	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	129	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	40	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	41	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	29	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	39	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	53	) AND State in (	45	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	21	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	45	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	63	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	69	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	85	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	95	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	97	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	101	) AND State in (	46	) then Top10=_n_;	
ELSE	IF	County in (	61	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	75	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	121	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	135	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	169	) AND State in (	47	) then Top10=_n_;	
ELSE	IF	County in (	3	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	23	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	33	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	47	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	59	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	65	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	81	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	83	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	89	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	105	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	109	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	119	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	127	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	131	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	133	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	137	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	149	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	151	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	155	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	161	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	173	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	175	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	177	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	185	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	197	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	205	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	207	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	211	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	229	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	235	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	243	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	255	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	261	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	267	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	269	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	271	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	283	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	287	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	289	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	297	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	301	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	305	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	311	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	313	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	317	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	327	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	353	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	359	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	365	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	371	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	383	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	385	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	389	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	391	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	393	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	395	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	405	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	419	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	421	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	425	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	431	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	433	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	435	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	443	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	461	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	475	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	483	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	487	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	495	) AND State in (	48	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	15	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	37	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	55	) AND State in (	49	) then Top10=_n_;	
ELSE	IF	County in (	25	) AND State in (	51	) then Top10=_n_;	
ELSE	IF	County in (	36	) AND State in (	51	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	41	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	71	) AND State in (	54	) then Top10=_n_;	
ELSE	IF	County in (	78	) AND State in (	55	) then Top10=_n_;	
ELSE	IF	County in (	7	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	9	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	11	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	17	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	19	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	27	) AND State in (	56	) then Top10=_n_;	
ELSE	IF	County in (	31	) AND State in (	56	) then Top10=_n_;	
	
 else delete;

If YEAR=2017 then delete;

Run;


** Top 10% of Counties FARS Descriptive Analysis ***;

proc freq data=High_TFRanks_Subset_3;
tables year;
run;

Proc univariate data=High_TFRanks_Subset_3;
var Age;
Histogram/Normal;
Run;

*Assess Means;
Proc means MEAN std median data=High_TFRanks_Subset_3;
var AGE ALC_RES SPD_LIM TRAV_SP;
Run;

*Look at frequencies of functional class system;
*Recognized that Census Rural/Urban are not available for years 2015-2017 ;
Proc freq data=High_TFRanks_Subset_3;
Tables per_typ Census_UR BODY Func_System LGT_COND WEATHER;
FORMAT Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt. ;
Run;

Proc freq data=High_TFRanks_Subset_3;
Tables per_typ;
Run;

Proc freq data=High_TFRanks_Subset_3;
Tables year;
Run;

** Compare to original FARS data, with all counties;
Data Traffic_Fats_2;
	set Traffic_Fats;
	If YEAR=2017 then delete;
Run;

Proc means mean std median data=Traffic_Fats_2;
var AGE ALC_RES SPD_LIM TRAV_SP;
Run;

*********************************
**********************************
* Know that Alcohol Results need to be a percentage. So 98 = 0.098% BAC;
Proc Print data=Traffic_Fats;
var ALC_RES;
where ALC_RES=98;
Run;

*Look at frequencies of functional class system;
*Recognized that Census Rural/Urban are not available for years 2015-2017 ;
Proc freq data=Traffic_Fats_2;
Tables per_typ Census_UR BODY Func_System LGT_COND WEATHER;
FORMAT Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt. ;
Run;

Proc freq data=Traffic_Fats_2;
Tables Year;
Run;


*
*
*
*
*
**** 	V I S U A L I Z E 		T O P 		10%		O F 		C O U N T I E S ******
*
*
*
*
*;

*Export Top 10% Counties Data to visualize bar charts; 
PROC EXPORT data=High_TFRanks_Subset
outfile="C:\Users\Briana.Thrift.ctr\Desktop\High_TFRanks_Subset.xlsx" 
dbms=xlsx
replace;
run;

*Export Aggregated Ranks Data with all counties ranked and income correlation;
PROC EXPORT data=Aggregated_Ranks
outfile="C:\Users\Briana.Thrift.ctr\Desktop\Agg_Data_SixYear.xlsx" 
dbms=xlsx
replace;
run;

****** Assess descriptive aggregated county variables by Percentage Bracket ****;

** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
run;

**Top 10% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:315);
run;

** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
	Where Traff_Rate_Rank in (1:315);
run;

proc univariate data=Aggregated_Ranks;
WHERE Traff_Rate between 0 and 150;
var Traff_Rate;
Where Traff_Rate_Rank in (1:315);
histogram / endpoints = 0 to 150 by 20;
run;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:315);
run;

*Top 30% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:945);
run;

** Assess variables for summary stats;
Proc means mean std median min max data=Aggregated_Ranks;
	var Pop_CountySum_SixYears Sqml_CountySum_SixYears Traffic_CountySum_SixYears;
	Where Traff_Rate_Rank in (1:945);
run;

proc univariate data=Aggregated_Ranks;
WHERE Traff_Rate between 0 and 500;
var Traff_Rate;
Where Traff_Rate_Rank in (1:945);
histogram / endpoints = 0 to 500 by 20;
run;

Proc freq data=Aggregated_Ranks;
	tables Urban_Rural_Category;
	Where Traff_Rate_Rank in (1:945);
run;

Proc contents data=Aggregated_Ranks;
run;

*Top 50% Bracket;
Proc means mean std median min max data=Aggregated_Ranks;
	var Traff_Rate;
	Where Traff_Rate_Rank in (1:1575);
run;



***** Assess original FARS variables, among All US Counties, Top 50% Bracket, Top 30% Bracket, and Top 50% Bracket****;

*Assess rural speed variables: TRAV_SP, MAK_MOD, MONTH, GVWR, BODY_TYP
ACC_TYPE, AIR_BAG, REST_USE, DRINKING, EJECTION, REST_MIS, HARM_EV, PREV_DWI, HIT_RUN
ROAD_FNC,SEX, AGE, DRV_ALC_RES, IMPACT1, MAN_COLL, RUR_URB, SEAT_POS;


	** Analyze all US Counties;
Proc contents data=FARS_Fipscodes;
run;

Proc means mean std median data=FARS_Fipscodes;
	var AGE TRAV_SP GVWR;
run;

Proc freq data=Traffic_Fats order=ascending;
	tables 	SEX RACE PER_TYP
			BODY ACC_TYPE HARM_EV
			Census_UR Func_System
			Weather Lgt_Cond 
;
	Format Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt.;
Run;

proc sort data=FARS_Fipscodes;
	by year;
run;

proc freq data=FARS_Fipscodes;
	tables per_typ;
	by year;
Run;

	** Top 30% Bracket**;
DATA Top30_SubAnalysis; 
	SET FARS_Fipscodes;

	IF Fips_code in (48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
48087
40099
30009
29185
40055
51183
1019
40033
46007
31163
48217
21031
1105
29087
31173
22037
48237
28091
40015
31113
28021
31101
17189
48263
28107
13155
48239
48045
31069
21105
1021
48129
37047
56003
13033
29139
30091
19195
29203
40067
29221
48411
31139
29143
40049
12003
5015
31103
48009
22021
29197
30097
40073
16029
48455
45033
28041
4005
48387
48357
30001
48403
48051
30083
28079
48333
46137
48247
47005
48343
48159
13133
12121
21099
6015
1013
46073
21077
29129
48165
16047
48335
48193
39163
48399
53001
40089
53043
21041
32033
13211
48275
21169
8071
55007
21193
18073
30037
45023
48417
20087
20101
1091
28097
1053
28063
45075
40035
46053
16053
28009
20147
16071
51037
6063
45089
48107
40091
28005
1029
47013
28125
48407
35051
12063
28161
19133
46037
42057
40081
40023
17075
29045
16059
5113
28141
8019
41031
55041
47115
41037
47083
5141
48225
37155
5075
12079
48401
20135
22013
48373
29073
30007
17151
13061
40097
47161
54047
48111
37017
54093
30105
47077
29173
40003
5137
19071
53023
20049
32027
29223
56045
48315
47109
29103
48457
13307
47039
22077
16079
5087
20077
13065
48013
12029
4017
22007
8057
1127
37015
37073
49023
5149
28099
31027
12059
1025
17035
48285
49033
21007
20145
19073
6027
5029
21203
28057
22121
28043
13189
40095
20139
21011
48125
17079
13321
16039
5097
21223
48413
20207
20043
49001
1023
6011
21143
38039
1113
30099
40051
46033
21187
19129
48363
46119
47175
31105
47055
28085
35039
38055
13191
5105
22111
5021
32013
13141
13087
48163
20163
5025
5081
39067
48467
40057
30053
29093
40087
13207
40151
4011
38037
16061
41021
47139
5041
51127
20127
28139
47159
48067
13163
31009
21195
8125
31161
8093
28137
18025
48307
38091
22025
21055
19003
47057
42113
55051
48101
28119
40111
17059
19009
21157
48179
21155
45005
54023
20029
13287
38029
48295
13011
56013
22085
1079
46057
12023
48019
29119
17085
46129
28123
21219
48135
40009
20159
48053
27133
29153
48077
22029
5089
21153
21119
28113
28007
28101
48079
17051
51097
12107
31099
46081
1007
49013
20089
27115
45067
21181
31017
20199
28061
51033
48279
48093
29215
51135
21231
31073
16031
16035
12049
28117
1065
38075
47085
21085
51163
28013
51007
40153
51175
48319
27063
21053
45061
56023
48293
20115
21129
13107
20191
12131
51081
53059
6049
1133
40041
40115
45059
21033
19085
30021
28127
48501
38079
29181
37163
28115
40133
40013
12067
13085
13003
20081
54109
18181
18169
29227
51197
31121
48203
13043
1107
18125
30109
54027
42115
48341
28111
31181
19011
20031
20193
20075
1071
55013
20003
12037
45009
27023
8081
21221
29209
48145
31035
5053
48445
30107
21087
18061
13093
1017
12051
48143
40117
22059
48191
41001
51029
5023
31047
1041
12087
21071
48233
17049
54085
40019
5035
29025
42053
20167
26083
55137
21229
6043
16025
22093
29015
13025
13229
31003
21027
8027
13201
1099
54005
28011
48497
47043
8051
13105
5061
21009
30027
48291
22123
29149
42023
55037
12133
13083
45031
6021
8113
45065
32023
31123
5135
1129
12123
38009
51001
5111
28157
20021
54035
47133
17157
1111
13171
19007
31185
12039
21235
48021
5049
29085
6035
38093
51021
47111
27107
17023
37185
38019
40107
13175
20109
48253
20085
19159
18171
5039
21183
35025
48115
48347
51091
42009
29157
21023
29141
45069
37123
28045
22053
28037
48055
6093
54059
13027
48073
21123
55057
21121
53051
38095
19115
1121
21057
42117
47103
20201
45011
6051
16009
13109
37141
47185
5067
8091
21213
47107
13075
48477
31041
42067
40077
28027
51017
51125
20123
51089
28135
46047
48249
13197
28109
47071
51035
28147
8003
29003
18147
5047
21001
13199
29065
30095
20013
18051
13161
29163
40061
54031
29186
42099
29137
38003
48147
37127
48481
47059
48227
13119
30065
13149
48103
29207
48499
22097
28067
24023
38027
51117
55077
37131
51057
40039
18111
46111
13193
5077
26003
48097
28151
21075
30019
 ) then Top30_Bracket="Yes";
		ELSE Delete;
Run;

Proc means mean median data=Top30_SubAnalysis;
	var TRAV_SP GVWR ;
run;

Proc means mean median data=Top30_SubAnalysis;
	var AGE;
run;

Proc freq data=Top30_SubAnalysis order=freq;
	tables 	SEX RACE PER_TYP
			BODY ACC_TYPE HARM_EV
			Census_UR Func_System
			Weather Lgt_Cond
;
	Format Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt.;
Run;

Proc sort data=Top30_SubAnalysis;
	by Year;
run;

Proc Freq data=Top30_SubAnalysis order=freq;
	tables Per_typ;
	by Year;
Run;

DATA Top20_SubAnalysis; 
	SET FARS_Fipscodes;

	IF Fips_code in
(48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
48087
40099
30009
29185
40055
51183
1019
40033
46007
31163
48217
21031
1105
29087
31173
22037
48237
28091
40015
31113
28021
31101
17189
48263
28107
13155
48239
48045
31069
21105
1021
48129
37047
56003
13033
29139
30091
19195
29203
40067
29221
48411
31139
29143
40049
12003
5015
31103
48009
22021
29197
30097
40073
16029
48455
45033
28041
4005
48387
48357
30001
48403
48051
30083
28079
48333
46137
48247
47005
48343
48159
13133
12121
21099
6015
1013
46073
21077
29129
48165
16047
48335
48193
39163
48399
53001
40089
53043
21041
32033
13211
48275
21169
8071
55007
21193
18073
30037
45023
48417
20087
20101
1091
28097
1053
28063
45075
40035
46053
16053
28009
20147
16071
51037
6063
45089
48107
40091
28005
1029
47013
28125
48407
35051
12063
28161
19133
46037
42057
40081
40023
17075
29045
16059
5113
28141
8019
41031
55041
47115
41037
47083
5141
48225
37155
5075
12079
48401
20135
22013
48373
29073
30007
17151
13061
40097
47161
54047
48111
37017
54093
30105
47077
29173
40003
5137
19071
53023
20049
32027
29223
56045
48315
47109
29103
48457
13307
47039
22077
16079
5087
20077
13065
48013
12029
4017
22007
8057
1127
37015
37073
49023
5149
28099
31027
12059
1025
17035
48285
49033
21007
20145
19073
6027
5029
21203
28057
22121
28043
13189
40095
20139
21011
48125
17079
13321
16039
5097
21223
48413
20207
20043
49001
1023
6011
21143
38039
1113
30099
40051
46033
21187
19129
48363
46119
47175
31105
47055
28085
35039
38055
13191
5105
22111
5021
32013
13141
13087
48163
20163
5025
5081
39067
48467
40057
30053
29093
40087
13207
40151
4011
38037
16061
41021
47139
5041
51127
20127
28139
47159
48067
13163
31009
21195
8125
31161
8093
28137
18025
48307
38091
22025
21055
19003
47057
42113
55051
48101
28119
40111
17059
19009
21157
48179
21155
45005
54023
20029
13287
38029
48295
13011
56013
22085
1079
46057
12023
48019
29119
17085
46129
28123
21219
48135
40009) then Top20_Bracket="Yes";
		ELSE Delete;
Run;

Proc means mean median data=Top20_SubAnalysis;
	var TRAV_SP GVWR;
run;

Proc means mean median data=Top20_SubAnalysis;
	var Age;
Run;

Proc freq data=Top20_SubAnalysis order=freq;
	tables 	SEX RACE PER_TYP
			BODY ACC_TYPE HARM_EV
			Census_UR Func_System
			Weather Lgt_Cond
;
	Format Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt.;
Run;

Proc sort data=Top20_SubAnalysis;
	by Year;
run;

Proc Freq data=Top20_SubAnalysis order=freq;
	tables Per_typ;
	by Year;
Run;


	** Top 10% Bracket**;
DATA Top10_SubAnalysis; 
	SET FARS_Fipscodes;

	IF Fips_code in (48301
48311
32009
48261
48173
48229
48359
48109
48235
16033
35021
6003
35019
38053
48393
32011
46075
48269
8017
8111
56027
30103
13265
30069
41055
48105
30045
48317
38087
30079
35011
48033
48385
48267
48283
46063
20017
8079
38025
40129
48389
48443
48435
48011
35023
48155
48475
46071
35037
48023
40053
48297
30003
48433
38007
48483
20063
8073
4012
48065
13301
35033
48271
40007
48461
16015
30011
48391
48205
1063
48081
40043
5095
48431
20179
30061
30033
40025
48127
46085
38061
48211
48327
48175
38013
56019
45053
49009
48003
45017
8023
48383
46003
40045
31005
48371
38005
16037
48421
46021
6091
56007
48177
32017
48289
20195
20203
48405
40093
20019
48243
8121
49017
8033
40059
13007
5117
30057
1037
48495
16049
20165
1131
8053
46045
32015
48047
1085
1035
4001
38043
38063
31133
31049
41069
28055
48031
48137
20073
46069
41025
8063
49027
16003
28031
56017
8009
46061
30087
5099
48313
30035
30055
38023
13263
45029
35057
20053
30075
16063
48287
46095
54071
47075
48255
5129
22081
48365
16077
49025
29035
56031
56011
48089
30043
1011
51025
6105
38105
49015
35053
30089
48395
21025
40085
30059
13099
49019
12047
20083
28143
46031
47121
20097
20071
49037
19001
22065
40127
38049
48059
13283
29179
32021
48151
8055
28029
5013
46097
35003
20093
40103
40105
48083
21237
21039
5073
5147
30005
28015
37075
38069
20181
22091
35006
47061
48197
13165
8115
49055
20183
28039
20129
48133
12043
48425
48419
30015
12075
31007
48207
20151
30039
19029
30077
8061
31171
28023
21051
29155
20197
48185
45027
48131
5059
28065
28051
20143
20069
21189
51036
54041
48161
13319
31087
20189
40011
48353
20185
46101
31031
5057
28093
35059
1087
56009
30073
1119
35007
31149
38085
48305
40149
48149
20119
21197
5017
35031
48487
8109
55078
45039
48119
54007
29131
40075
47169
13289
22047
47135
12065
29125
48507
48351
4007
20033
30085
40005
46055
48071
30071
46109
28069
17069
48169
 ) then Top10_Bracket="Yes";
		ELSE Delete;
Run;

Proc means mean median data=Top10_SubAnalysis;
	var TRAV_SP GVWR ;
run;

Proc means mean median data=Top10_SubAnalysis;
	var AGE;
Run;

Proc freq data=Top10_SubAnalysis order=freq;
	tables 	SEX RACE PER_TYP
			BODY ACC_TYPE HARM_EV
			Census_UR Func_System
			Weather Lgt_Cond
;
	Format Census_UR Census_UR_fmt. BODY BODYFMT. Func_System Func_fmt.;
Run;

Proc sort data=Top20_SubAnalysis;
	by Year;
run;

Proc Freq data=Top10_SubAnalysis order=freq;
	tables Per_typ;
	by Year;
Run;


* Top 20% Bracket;

